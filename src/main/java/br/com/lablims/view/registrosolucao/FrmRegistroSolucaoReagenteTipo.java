/*
 * Copyright (C) 2017 rafael.lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.registrosolucao;

import br.com.lablims.view.cromatografia.*;
//import Frm.Login.FrmSalvarDataHora;
//import Classes.DAO.AnaliseCromatografoDAO;
//import Classes.DAO.AnaliseDAO;
//import Classes.DAO.CampanhaDAO;
//import Classes.DAO.ColunaDAO;
//import Classes.DAO.CromatografoDAO;
//import Classes.DAO.FaseMovelDAO;
//import Classes.DAO.SystemSuitabilityDAO;
//import Classes.Modelo.Analise;
//import Classes.Modelo.AnaliseCromatografo;
//import Classes.Modelo.Campanha;
//import Classes.Modelo.Coluna;
//import Classes.Modelo.Cromatografo;
//import Classes.Modelo.FaseMovel;
//import Classes.Modelo.SystemSuitability;
//import Classes.Modelo.Usuario;
//import Classes.Util.ComboBox;
//import Classes.Util.DataHora;
import java.awt.Cursor;
import java.sql.Timestamp;
import java.util.Date;
import java.util.TreeMap;
import javax.swing.JOptionPane;

/**
 *
 * @author rafael.lopes
 */
public class FrmRegistroSolucaoReagenteTipo extends javax.swing.JDialog {

    private TreeMap<Integer, String> categoryMapAnaliseStatus = new TreeMap<>();
    private static String sys_name;
    private static int campanha_id;
    private static int verificar_analise = 0;
    //private Timestamp data_inicio;

    /**
     * Creates new form FrmNovoRegistro
     *
     * @param parent
     * @param modal
     * @param system_name
     *
     */
    public FrmRegistroSolucaoReagenteTipo(java.awt.Frame parent, boolean modal,
            String system_name, int campanha, int analise) {
        super(parent, modal);
        initComponents();
        sys_name = system_name;
        campanha_id = campanha;
        verificar_analise = analise;
        setLocationRelativeTo(null);
        setTitle("Novo Registro");
        this.setResizable(false);
        readAnaliseStatus();
        carregar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnAnalise = new javax.swing.JButton();
        btnAjusteSistema = new javax.swing.JButton();
        btnAguardando = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        btnAnalise.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAnalise.setText("Solução Extemporanea");
        btnAnalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnaliseActionPerformed(evt);
            }
        });

        btnAjusteSistema.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAjusteSistema.setText("Solução ");
        btnAjusteSistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjusteSistemaActionPerformed(evt);
            }
        });

        btnAguardando.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAguardando.setText("Aguardando");
        btnAguardando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAguardandoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAguardando, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAjusteSistema, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                    .addComponent(btnAnalise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btnAnalise, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAjusteSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAguardando, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAjusteSistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjusteSistemaActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        novoRegistro(6, "EQUIPAMENTO");
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnAjusteSistemaActionPerformed

    private void btnAnaliseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnaliseActionPerformed
//        if (verificar_analise == 1) {
//            JOptionPane.showMessageDialog(null, "Coluna Cromatográfica não selecionada");
//        } else if (verificar_analise == 3) {
//            JOptionPane.showMessageDialog(null, "Sistema não está verificado");
//        } else if (verificar_analise == 0) {
//            novoRegistro(5, null);
//        }
    }//GEN-LAST:event_btnAnaliseActionPerformed

    private void btnAguardandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAguardandoActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        novoRegistro(7, null);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnAguardandoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRegistroSolucaoReagenteTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRegistroSolucaoReagenteTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRegistroSolucaoReagenteTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRegistroSolucaoReagenteTipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmRegistroSolucaoReagenteTipo dialog = new FrmRegistroSolucaoReagenteTipo(new javax.swing.JFrame(), true, null, 0, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAguardando;
    private javax.swing.JButton btnAjusteSistema;
    private javax.swing.JButton btnAnalise;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    public final void readAnaliseStatus() {
//        cmbAnaliseStatus.removeAllItems();
//        cmbAnaliseStatus.addItem("");
//        categoryMapAnaliseStatus.clear();
//        AnaliseDAO anseDao = new AnaliseDAO();
//        for (Analise anls : anseDao.readAnaliseStatus()) {
//            Integer id = anls.getAnalise_status_id();
//            String name = anls.getAnalise_status();
//            cmbAnaliseStatus.addItem(name);
//            categoryMapAnaliseStatus.put(id, name);
//        }
    }

    private void novoRegistro(Integer analise_status, String analise_tipo) {
//        //Abre Dialog para savar
//        FrmDialogSalvar frmSalvar = new FrmDialogSalvar(null, true, sys_name,
//                analise_status, analise_tipo, campanha_id);
//        frmSalvar.setVisible(true);
//        if (FrmDialogSalvar.senha()) {
//            dispose();
//        }
    }

    private void finalizarCampanha(Timestamp data) {
//        Campanha camp = new Campanha();
//        Cromatografo equip = new Cromatografo();
//        CampanhaDAO campDao = new CampanhaDAO();
//        Usuario user = new Usuario();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        FaseMovel fase = new FaseMovel();
//        Coluna col = new Coluna();
//        Analise anls = new Analise();
//        SystemSuitability system = new SystemSuitability();
//        FaseMovelDAO faseDAO = new FaseMovelDAO();
//        ColunaDAO colDAO = new ColunaDAO();
//        SystemSuitabilityDAO systemDAO = new SystemSuitabilityDAO();
//        //busca pelo nome do equipamento
//        camp.setLog_campanha_id(campanha_id);
//        equip.setCampanha(camp);
//        equip.setSystem_name(sys_name);
//        equipDAO.selectLogCromatografo(equip);
//        col.setCromatografo(equip);
//        fase.setCromatografo(equip);
//        system.setCromatografo(equip);
//        int idCol = colDAO.selectIDUltimaColunaBySystem(col);
//        if (idCol > 0) {
//            col.setLog_coluna_id(idCol);
//            col.setData_registro_log(DataHora.getTimestampDate(new Date()));
//            col.setData_fim_log(DataHora.getTimestampDate(new Date()));
//            colDAO.updateFimLogColuna(col);
//        }
//        int idFase = faseDAO.selectIDUltimaFaseMovelBySystem(fase);
//        if (idFase > 0) {
//            fase.setFase_movel_id(idFase);
//            fase.setData_registro(DataHora.getTimestampDate(new Date()));
//            fase.setData_fim(DataHora.getTimestampDate(new Date()));
//            faseDAO.updateFimLogFaseMovel(fase);
//        }
//        int idSystem = systemDAO.selectIDUltimoSystemSuitabilityBySystem(system);
//        if (idSystem > 0) {
//            system.setSystem_suitability_id(idSystem);
//            system.setData_registro(DataHora.getTimestampDate(new Date()));
//            system.setData_fim(DataHora.getTimestampDate(new Date()));
//            systemDAO.updateFimLogSystemSuitability(system);
//        }
//        fase.setCromatografo(equip);
//        faseDAO.selectUltimaFaseMovelBySystem(fase);
//        colDAO.selectUltimaColunaBySystem(col);
//        equip.setData_fim(data);
//        equip.setData_registro(DataHora.getTimestampDate(new Date()));
//        user.setUser(System.getProperty("user"));
//        equip.setUsuario(user);
//        //verifica se o registro é uma NOVA ANÁLISE
//        //set FaseMovel e Coluna
//        try {
//            if (equip.getAnalise().getAnalise_status_id() == 1
//                    || equip.getAnalise().getAnalise_status_id() == 2) {
//                fase.setFase_movel_id(0);
//                col.setColuna_id(0);
//            }
//        } catch (Exception e) {
//            fase.setFase_movel_id(0);
//            col.setColuna_id(0);
//        }
//        equip.setFasemovel(fase);
//        equip.setColuna(col);
//        //Atualiza no registro anterior
//        equipDAO.updateLogCromatografo(equip);
//        //Aualiza Campanha como Final da Analise
//        camp.setCromatografo(equip);
//        campDao.selectCampanhaBySystem(camp);
//        camp.setData_fim(data);
//        camp.setUser_fim(user);
//        camp.setCor("Preto");
//        //Grava dados no banco
//        campDao.updateFimCampanha(camp);
//        //Gera Final da Analise
//        fase.setFase_movel_id(0);
//        col.setColuna_id(0);
//        equip.setFasemovel(fase);
//        equip.setColuna(col);
//        anls.setAnalise_status_id(2);
//        equip.setAnalise(anls);
//        equip.setSystem_name(sys_name);
//        equip.setData_inicio(data);
//        equip.setDescricao("FINAL ANÁLISE" + (camp.getNome_campanha().isEmpty()
//                ? "" : " - " + camp.getNome_campanha()));
//        user.setUser(System.getProperty("user"));
//        equip.setUsuario(user);
//        equip.setMetodos("");
//        equip.setObs_log("FINAL DA ANÁLISE");
//        //Grava dados no banco
//        equipDAO.createLogFimCromatografo(equip);
    }

    private void finalizarLotes() {
//        Cromatografo equip = new Cromatografo();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        equip.setSystem_name(sys_name);
//        equipDAO.selectCromatografoByName(equip);
//        AnaliseCromatografoDAO anlscroDao = new AnaliseCromatografoDAO();
//        Usuario user = new Usuario();
//        try {
//            if (anlscroDao.readAnaliseCromatografoAivo(equip).size() > 0) {
//                int dialogResult = JOptionPane.showConfirmDialog(null,
//                        "Exitem lotes Em Análise! \nDeseja Finalizar todos os Lotes?",
//                        "Aviso", JOptionPane.YES_NO_OPTION);
//                if (dialogResult == 0) {
//                    for (AnaliseCromatografo anlscro : anlscroDao.readAnaliseCromatografoAivo(equip)) {
//                        user.setUser(System.getProperty("user"));
//                        anlscro.setLog_lote_id(anlscro.getLog_lote_id());
//                        anlscro.setStatus("Finalizado");
//                        anlscro.setData_hora_fim(DataHora.getTimestampDate(new Date()));
//                        anlscro.setData_hora_registro(DataHora.getTimestampDate(new Date()));
//                        anlscro.setUser_fim(user);
//                        anlscro.setUser_registro(user);
//                        anlscroDao.updateFimLote(anlscro);
//                    }
//                }
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
//        }
    }

    private void carregar() {
//        try {
//            Campanha camp = new Campanha();
//            Cromatografo equip = new Cromatografo();
//            CromatografoDAO equipDAO = new CromatografoDAO();
//            CampanhaDAO campDao = new CampanhaDAO();
//            equip.setSystem_name(sys_name);
//            camp.setCromatografo(equip);
//            campDao.selectCampanhaFimBySystem(camp);
//            equipDAO.selectLogCromatografo(equip);
//            if ((camp.getUser_fim().getUser() == null && camp.getUser_inicio().getUser() != null)) {
//                btnNovaAnalise.setEnabled(false);
//                btnAjusteSistema.setEnabled(true);
//                btnAnalise.setEnabled(true);
//                btnEstabilizacao.setEnabled(true);
//                cmbAnaliseStatus.setEnabled(true);
//                btnOutro.setEnabled(true);
//                btnFaseMovel.setEnabled(true);
//                btnColuna.setEnabled(true);
//                btnSystemSuitability.setEnabled(true);
//                btnAguardando.setEnabled(true);
//                btnLimpeza.setEnabled(true);
//                btnManutencao.setEnabled(true);
//                btnOutro.setEnabled(true);
//            } else if (camp.getUser_fim().getUser() != null) {
//                btnFimAnalise.setEnabled(false);
//                btnAjusteSistema.setEnabled(false);
//                btnAnalise.setEnabled(false);
//                btnEstabilizacao.setEnabled(false);
//                cmbAnaliseStatus.setEnabled(true);
//                btnOutro.setEnabled(true);
//                btnFaseMovel.setEnabled(false);
//                btnColuna.setEnabled(false);
//                btnSystemSuitability.setEnabled(false);
//                btnAguardando.setEnabled(true);
//                btnLimpeza.setEnabled(true);
//                btnManutencao.setEnabled(true);
//            }
//        } catch (Exception e) {
//            btnNovaAnalise.setEnabled(true);
//            btnFimAnalise.setEnabled(false);
//            btnAguardando.setEnabled(true);
//            btnAjusteSistema.setEnabled(false);
//            btnAnalise.setEnabled(false);
//            btnEstabilizacao.setEnabled(false);
//            btnLimpeza.setEnabled(true);
//            btnManutencao.setEnabled(true);
//            btnOutro.setEnabled(true);
//            cmbAnaliseStatus.setEnabled(true);
//            btnFaseMovel.setEnabled(false);
//            btnColuna.setEnabled(false);
//            btnSystemSuitability.setEnabled(false);
//        }
    }

}
