/*
 * Copyright (C) 2017 rafael.lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.cromatografia;

import br.com.lablims.dao.TrocaTurnoDAO;
import static br.com.lablims.model.Acesso_.ACESSO;
import br.com.lablims.model.TrocaTurno;
import br.com.lablims.util.AcessoSistema;
import br.com.lablims.util.DataHora;
import br.com.lablims.util.Senha;
import br.com.lablims.util.TableSorter;
import br.com.lablims.view.trocaturno.FrmTrocaTurno;
import java.awt.Cursor;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rafael.lopes
 */
public class PnlLogCromatografo extends javax.swing.JPanel {

    private JTextField campoMotivo = new JTextField(40);
    private JLabel textoMotivo = new JLabel("Motivo: ");
    private Long campanha_id;
    private int coluna_id;
    private String sys_name;
    final String zeros = "0000";

    public static String getValueforKey(Integer value, TreeMap<Integer, String> category) {
        for (Map.Entry<Integer, String> entry : category.entrySet()) {
            if (entry.getKey().equals(value)) {
                return entry.getValue();
            }
        }
        return "";
    }

    /**
     * Creates new form NewJPanel
     *
     * @param system_name
     */
    public PnlLogCromatografo(String system_name) {
        initComponents();
        sys_name = system_name;
        lblEquipamentoLogbook.setText(system_name);
        atualizar();
        verificarAtualizacao();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCampanha = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtObs = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        lblColuna = new javax.swing.JLabel();
        lblFaseMovel = new javax.swing.JLabel();
        lblSystem = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtInicioCampanha = new javax.swing.JTextField();
        btnAtualizar = new javax.swing.JButton();
        btnNovoRegistro = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtPrevisao = new javax.swing.JTextField();
        lblStart = new javax.swing.JLabel();
        pnlDados = new javax.swing.JTabbedPane();
        pnlRegistros = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistros = new javax.swing.JTable();
        pnlTrocaTurno = new javax.swing.JPanel();
        txtPesquisarMetodologia = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnNovo = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnEditar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnAtualizar1 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnExcluir = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        cmbLimitPorPagina = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblTrocaTurno = new javax.swing.JTable();
        pnlFaseMovel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtCanalA = new javax.swing.JTextField();
        txtQtCanalA = new javax.swing.JTextField();
        txtQtCanalB = new javax.swing.JTextField();
        txtQtCanalC = new javax.swing.JTextField();
        txtCanalC = new javax.swing.JTextField();
        txtQtCanalD = new javax.swing.JTextField();
        txtCanalD = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtCanalB = new javax.swing.JTextField();
        txtLoteCanalA = new javax.swing.JTextField();
        txtValidadeCanalA = new javax.swing.JTextField();
        txtLoteCanalB = new javax.swing.JTextField();
        txtLoteCanalC = new javax.swing.JTextField();
        txtLoteCanalD = new javax.swing.JTextField();
        txtValidadeCanalB = new javax.swing.JTextField();
        txtValidadeCanalC = new javax.swing.JTextField();
        txtValidadeCanalD = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtCanalE = new javax.swing.JTextField();
        txtLoteCanalE = new javax.swing.JTextField();
        txtValidadeCanalE = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtCanalF = new javax.swing.JTextField();
        txtLoteCanalF = new javax.swing.JTextField();
        txtValidadeCanalF = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtCodigoColuna = new javax.swing.JTextField();
        txtFabricanteColuna = new javax.swing.JTextField();
        txtAtivacaoColuna = new javax.swing.JTextField();
        txtAnaliseColuna = new javax.swing.JTextField();
        txtMetodoColuna = new javax.swing.JTextField();
        txtSetorColuna = new javax.swing.JTextField();
        txtParticulaColuna = new javax.swing.JTextField();
        txtMarcaColuna = new javax.swing.JTextField();
        txtDiametroColuna = new javax.swing.JTextField();
        txtVagaColuna = new javax.swing.JTextField();
        txtTamanhoColuna = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtObsColuna = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        rbtSentidoDireto = new javax.swing.JRadioButton();
        rbtSentidoInverso = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        rbtFiltroSim = new javax.swing.JRadioButton();
        rbtFiltroNao = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        rbtPreColunaSim = new javax.swing.JRadioButton();
        rbtPreColunaNao = new javax.swing.JRadioButton();
        pnlSystem = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblHistoricoSystem = new javax.swing.JTable();
        pnlLote = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblLotes = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        txtPesquisarLote = new javax.swing.JTextField();
        pnlCampanhas = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblCampanhas = new javax.swing.JTable();
        txtPesquisarCampanhas = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        pnlAuditoria = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblAuditoria = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        txtPesquisarAuditoria = new javax.swing.JTextField();
        pnlStart = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblStart = new javax.swing.JTable();
        txtPesquisarTrocaTurno1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblEquipamentoLogbook = new javax.swing.JLabel();
        lblIconeEquipamento = new javax.swing.JLabel();
        lblAlertaSolucaoReagente = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Campanha"));

        jLabel1.setText("Nome:");

        txtCampanha.setEditable(false);
        txtCampanha.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Obs:");

        txtObs.setEditable(false);
        txtObs.setBackground(new java.awt.Color(255, 255, 255));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_info.png"))); // NOI18N
        jButton6.setToolTipText("Metodologias");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        lblColuna.setText("Coluna");

        lblFaseMovel.setText("Fase Móvel");

        lblSystem.setText("System Suitability");

        jLabel6.setText("Início:");

        txtInicioCampanha.setEditable(false);
        txtInicioCampanha.setBackground(new java.awt.Color(255, 255, 255));

        btnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_raio.png"))); // NOI18N
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setToolTipText("Atualizar");
        btnAtualizar.setPreferredSize(new java.awt.Dimension(105, 34));
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnNovoRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_plus.png"))); // NOI18N
        btnNovoRegistro.setText("Novo");
        btnNovoRegistro.setPreferredSize(new java.awt.Dimension(105, 34));
        btnNovoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoRegistroActionPerformed(evt);
            }
        });

        jLabel11.setText("Previsão:");

        txtPrevisao.setEditable(false);
        txtPrevisao.setBackground(new java.awt.Color(255, 255, 255));

        lblStart.setText("Start");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCampanha)
                    .addComponent(txtObs)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblColuna)
                        .addGap(60, 60, 60)
                        .addComponent(lblFaseMovel)
                        .addGap(60, 60, 60)
                        .addComponent(lblSystem)
                        .addGap(60, 60, 60)
                        .addComponent(lblStart)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInicioCampanha, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(btnNovoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCampanha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)
                            .addComponent(txtInicioCampanha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel11)
                            .addComponent(txtPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNovoRegistro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblColuna)
                                .addComponent(lblFaseMovel)
                                .addComponent(lblSystem)
                                .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblStart)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Registros"));

        tblRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "cor", "Id", "Início", "Fim", "Descrição", "Data Registro", "Usuário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRegistros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblRegistrosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblRegistros);
        if (tblRegistros.getColumnModel().getColumnCount() > 0) {
            tblRegistros.getColumnModel().getColumn(0).setMinWidth(0);
            tblRegistros.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblRegistros.getColumnModel().getColumn(0).setMaxWidth(0);
            tblRegistros.getColumnModel().getColumn(1).setMinWidth(0);
            tblRegistros.getColumnModel().getColumn(1).setPreferredWidth(0);
            tblRegistros.getColumnModel().getColumn(1).setMaxWidth(0);
            tblRegistros.getColumnModel().getColumn(2).setMinWidth(120);
            tblRegistros.getColumnModel().getColumn(2).setPreferredWidth(120);
            tblRegistros.getColumnModel().getColumn(2).setMaxWidth(120);
            tblRegistros.getColumnModel().getColumn(3).setMinWidth(120);
            tblRegistros.getColumnModel().getColumn(3).setPreferredWidth(120);
            tblRegistros.getColumnModel().getColumn(3).setMaxWidth(120);
            tblRegistros.getColumnModel().getColumn(5).setMinWidth(150);
            tblRegistros.getColumnModel().getColumn(5).setPreferredWidth(150);
            tblRegistros.getColumnModel().getColumn(5).setMaxWidth(150);
            tblRegistros.getColumnModel().getColumn(6).setMinWidth(100);
            tblRegistros.getColumnModel().getColumn(6).setPreferredWidth(100);
            tblRegistros.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        javax.swing.GroupLayout pnlRegistrosLayout = new javax.swing.GroupLayout(pnlRegistros);
        pnlRegistros.setLayout(pnlRegistrosLayout);
        pnlRegistrosLayout.setHorizontalGroup(
            pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
        );
        pnlRegistrosLayout.setVerticalGroup(
            pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))
        );

        pnlDados.addTab("Registros", pnlRegistros);

        txtPesquisarMetodologia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarMetodologiaKeyReleased(evt);
            }
        });

        jLabel4.setText("Pesquisar:");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_add.png"))); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.setFocusable(false);
        btnNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNovo);
        jToolBar1.add(jSeparator4);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_edit.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);
        jToolBar1.add(jSeparator3);

        btnAtualizar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_atualizar.png"))); // NOI18N
        btnAtualizar1.setText("Atualizar");
        btnAtualizar1.setFocusable(false);
        btnAtualizar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtualizar1.setPreferredSize(new java.awt.Dimension(60, 60));
        btnAtualizar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizar1ActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAtualizar1);
        jToolBar1.add(jSeparator5);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_close.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setPreferredSize(new java.awt.Dimension(60, 60));
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExcluir);

        jLabel13.setText("Visualizar:");

        cmbLimitPorPagina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100", "1000", "10000", "100000", "1000000", "10000000" }));
        cmbLimitPorPagina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLimitPorPaginaActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Trocas de Turno"));

        tblTrocaTurno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Troca_Tuno_Id", "Turno", "Passagem", "Data Atualização", "Usuário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTrocaTurno.setSurrendersFocusOnKeystroke(true);
        tblTrocaTurno.getTableHeader().setReorderingAllowed(false);
        tblTrocaTurno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTrocaTurnoMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblTrocaTurno);
        if (tblTrocaTurno.getColumnModel().getColumnCount() > 0) {
            tblTrocaTurno.getColumnModel().getColumn(0).setMinWidth(0);
            tblTrocaTurno.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblTrocaTurno.getColumnModel().getColumn(0).setMaxWidth(0);
            tblTrocaTurno.getColumnModel().getColumn(1).setMinWidth(150);
            tblTrocaTurno.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblTrocaTurno.getColumnModel().getColumn(1).setMaxWidth(150);
            tblTrocaTurno.getColumnModel().getColumn(3).setMinWidth(180);
            tblTrocaTurno.getColumnModel().getColumn(3).setPreferredWidth(180);
            tblTrocaTurno.getColumnModel().getColumn(3).setMaxWidth(180);
            tblTrocaTurno.getColumnModel().getColumn(4).setMinWidth(200);
            tblTrocaTurno.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblTrocaTurno.getColumnModel().getColumn(4).setMaxWidth(200);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlTrocaTurnoLayout = new javax.swing.GroupLayout(pnlTrocaTurno);
        pnlTrocaTurno.setLayout(pnlTrocaTurnoLayout);
        pnlTrocaTurnoLayout.setHorizontalGroup(
            pnlTrocaTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlTrocaTurnoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTrocaTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTrocaTurnoLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarMetodologia, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbLimitPorPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(pnlTrocaTurnoLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        pnlTrocaTurnoLayout.setVerticalGroup(
            pnlTrocaTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTrocaTurnoLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(pnlTrocaTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTrocaTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbLimitPorPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addGroup(pnlTrocaTurnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPesquisarMetodologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlDados.addTab("Passagem Turno", pnlTrocaTurno);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Fase Móvel"));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Fase Móvel");

        jLabel17.setText("Canal A:");

        jLabel18.setText("Canal C:");

        jLabel19.setText("Canal D:");

        jLabel20.setText("Canal B:");

        txtCanalA.setEditable(false);
        txtCanalA.setBackground(new java.awt.Color(204, 204, 204));

        txtQtCanalA.setEditable(false);
        txtQtCanalA.setBackground(new java.awt.Color(204, 204, 204));

        txtQtCanalB.setEditable(false);
        txtQtCanalB.setBackground(new java.awt.Color(204, 204, 204));

        txtQtCanalC.setEditable(false);
        txtQtCanalC.setBackground(new java.awt.Color(204, 204, 204));

        txtCanalC.setEditable(false);
        txtCanalC.setBackground(new java.awt.Color(204, 204, 204));

        txtQtCanalD.setEditable(false);
        txtQtCanalD.setBackground(new java.awt.Color(204, 204, 204));

        txtCanalD.setEditable(false);
        txtCanalD.setBackground(new java.awt.Color(204, 204, 204));

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("%");

        txtCanalB.setEditable(false);
        txtCanalB.setBackground(new java.awt.Color(204, 204, 204));

        txtLoteCanalA.setEditable(false);
        txtLoteCanalA.setBackground(new java.awt.Color(204, 204, 204));

        txtValidadeCanalA.setEditable(false);
        txtValidadeCanalA.setBackground(new java.awt.Color(204, 204, 204));

        txtLoteCanalB.setEditable(false);
        txtLoteCanalB.setBackground(new java.awt.Color(204, 204, 204));

        txtLoteCanalC.setEditable(false);
        txtLoteCanalC.setBackground(new java.awt.Color(204, 204, 204));

        txtLoteCanalD.setEditable(false);
        txtLoteCanalD.setBackground(new java.awt.Color(204, 204, 204));

        txtValidadeCanalB.setEditable(false);
        txtValidadeCanalB.setBackground(new java.awt.Color(204, 204, 204));

        txtValidadeCanalC.setEditable(false);
        txtValidadeCanalC.setBackground(new java.awt.Color(204, 204, 204));

        txtValidadeCanalD.setEditable(false);
        txtValidadeCanalD.setBackground(new java.awt.Color(204, 204, 204));

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Lote");

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Validade");

        jLabel29.setText("Autoinjetor:");

        txtCanalE.setEditable(false);
        txtCanalE.setBackground(new java.awt.Color(204, 204, 204));

        txtLoteCanalE.setEditable(false);
        txtLoteCanalE.setBackground(new java.awt.Color(204, 204, 204));

        txtValidadeCanalE.setEditable(false);
        txtValidadeCanalE.setBackground(new java.awt.Color(204, 204, 204));

        jLabel37.setText("Selo Pistão:");

        txtCanalF.setEditable(false);
        txtCanalF.setBackground(new java.awt.Color(204, 204, 204));

        txtLoteCanalF.setEditable(false);
        txtLoteCanalF.setBackground(new java.awt.Color(204, 204, 204));

        txtValidadeCanalF.setEditable(false);
        txtValidadeCanalF.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCanalE, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                            .addComponent(txtCanalF)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCanalA)
                            .addComponent(txtCanalB)
                            .addComponent(txtCanalC)
                            .addComponent(txtCanalD))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtLoteCanalF)
                    .addComponent(txtLoteCanalE, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtLoteCanalA, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtLoteCanalB, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtLoteCanalC, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtLoteCanalD, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtValidadeCanalA, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValidadeCanalB, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValidadeCanalC, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValidadeCanalD, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtQtCanalA)
                            .addComponent(txtQtCanalB)
                            .addComponent(txtQtCanalC)
                            .addComponent(txtQtCanalD)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)))
                    .addComponent(txtValidadeCanalE, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtValidadeCanalF, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(txtCanalA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCanalB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCanalC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(txtCanalD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQtCanalA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQtCanalB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQtCanalC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQtCanalD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValidadeCanalA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValidadeCanalB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValidadeCanalC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValidadeCanalD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLoteCanalA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLoteCanalB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLoteCanalC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLoteCanalD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel29)
                        .addComponent(txtCanalE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLoteCanalE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtValidadeCanalE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel37)
                        .addComponent(txtCanalF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLoteCanalF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtValidadeCanalF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Coluna"));

        jLabel24.setText("Método:");

        jLabel25.setText("Código:");

        jLabel26.setText("Fabricante:");

        jLabel27.setText("Setor:");

        jLabel28.setText("Tamanho:");

        txtCodigoColuna.setEditable(false);
        txtCodigoColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtFabricanteColuna.setEditable(false);
        txtFabricanteColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtAtivacaoColuna.setEditable(false);
        txtAtivacaoColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtAnaliseColuna.setEditable(false);
        txtAnaliseColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtMetodoColuna.setEditable(false);
        txtMetodoColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtSetorColuna.setEditable(false);
        txtSetorColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtParticulaColuna.setEditable(false);
        txtParticulaColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtMarcaColuna.setEditable(false);
        txtMarcaColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtDiametroColuna.setEditable(false);
        txtDiametroColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtVagaColuna.setEditable(false);
        txtVagaColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtTamanhoColuna.setEditable(false);
        txtTamanhoColuna.setBackground(new java.awt.Color(204, 204, 204));

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Análise:");

        jLabel31.setText("Marca:");

        jLabel32.setText("Partícula:");

        jLabel33.setText("Diâmetro:");

        jLabel34.setText("Vaga:");

        jLabel35.setText("Ativação:");

        jLabel36.setText("Obs:");

        txtObsColuna.setEditable(false);
        txtObsColuna.setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setText("Sentido:");

        rbtSentidoDireto.setText("Direto");
        rbtSentidoDireto.setEnabled(false);

        rbtSentidoInverso.setText("Inverso");
        rbtSentidoInverso.setEnabled(false);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel5.setText("Pré-Filtro:");

        rbtFiltroSim.setText("Sim");
        rbtFiltroSim.setEnabled(false);

        rbtFiltroNao.setText("Não");
        rbtFiltroNao.setEnabled(false);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel7.setText("Pré-Coluna:");

        rbtPreColunaSim.setText("Sim");
        rbtPreColunaSim.setEnabled(false);

        rbtPreColunaNao.setText("Não");
        rbtPreColunaNao.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txtCodigoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAnaliseColuna))
                            .addComponent(txtMetodoColuna)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSetorColuna, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txtFabricanteColuna)
                                .addGap(2, 2, 2))
                            .addComponent(txtObsColuna))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMarcaColuna)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtVagaColuna))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTamanhoColuna)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDiametroColuna)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtParticulaColuna)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAtivacaoColuna))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtSentidoDireto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtSentidoInverso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtFiltroSim)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbtFiltroNao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtPreColunaSim)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbtPreColunaNao)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtCodigoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAnaliseColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMetodoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtFabricanteColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(txtMarcaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(txtVagaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(txtAtivacaoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSetorColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel28)
                    .addComponent(txtTamanhoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(txtParticulaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(txtDiametroColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel36)
                        .addComponent(txtObsColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(rbtFiltroSim)
                            .addComponent(rbtFiltroNao)
                            .addComponent(jLabel7)
                            .addComponent(rbtPreColunaNao)
                            .addComponent(rbtPreColunaSim)))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbtSentidoDireto)
                        .addComponent(rbtSentidoInverso)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlFaseMovelLayout = new javax.swing.GroupLayout(pnlFaseMovel);
        pnlFaseMovel.setLayout(pnlFaseMovelLayout);
        pnlFaseMovelLayout.setHorizontalGroup(
            pnlFaseMovelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFaseMovelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFaseMovelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlFaseMovelLayout.setVerticalGroup(
            pnlFaseMovelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFaseMovelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDados.addTab("Informações", pnlFaseMovel);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Adequações de Sistema"));

        tblHistoricoSystem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Histórico", "Campanha", "Data / Hora", "Check", "Verificado Por"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHistoricoSystem.getTableHeader().setReorderingAllowed(false);
        tblHistoricoSystem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHistoricoSystemMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblHistoricoSystem);
        if (tblHistoricoSystem.getColumnModel().getColumnCount() > 0) {
            tblHistoricoSystem.getColumnModel().getColumn(0).setMinWidth(0);
            tblHistoricoSystem.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblHistoricoSystem.getColumnModel().getColumn(0).setMaxWidth(0);
            tblHistoricoSystem.getColumnModel().getColumn(1).setPreferredWidth(600);
            tblHistoricoSystem.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblHistoricoSystem.getColumnModel().getColumn(2).setMaxWidth(200);
            tblHistoricoSystem.getColumnModel().getColumn(3).setPreferredWidth(180);
            tblHistoricoSystem.getColumnModel().getColumn(4).setPreferredWidth(80);
            tblHistoricoSystem.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlSystemLayout = new javax.swing.GroupLayout(pnlSystem);
        pnlSystem.setLayout(pnlSystemLayout);
        pnlSystemLayout.setHorizontalGroup(
            pnlSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSystemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlSystemLayout.setVerticalGroup(
            pnlSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSystemLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlDados.addTab("System Suitability", pnlSystem);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Lotes"));

        tblLotes.setAutoCreateRowSorter(true);
        tblLotes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Produto", "Análise", "Lote", "Campanha", "Status", "Data Registro", "Analista", "Retrabalho"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLotes.setSurrendersFocusOnKeystroke(true);
        tblLotes.getTableHeader().setReorderingAllowed(false);
        tblLotes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLotesMouseClicked(evt);
            }
        });
        tblLotes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblLotesKeyReleased(evt);
            }
        });
        jScrollPane8.setViewportView(tblLotes);
        if (tblLotes.getColumnModel().getColumnCount() > 0) {
            tblLotes.getColumnModel().getColumn(0).setMinWidth(0);
            tblLotes.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblLotes.getColumnModel().getColumn(0).setMaxWidth(0);
            tblLotes.getColumnModel().getColumn(1).setResizable(false);
            tblLotes.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblLotes.getColumnModel().getColumn(3).setMaxWidth(150);
            tblLotes.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblLotes.getColumnModel().getColumn(4).setMaxWidth(200);
            tblLotes.getColumnModel().getColumn(5).setPreferredWidth(120);
            tblLotes.getColumnModel().getColumn(5).setMaxWidth(120);
            tblLotes.getColumnModel().getColumn(6).setPreferredWidth(150);
            tblLotes.getColumnModel().getColumn(6).setMaxWidth(150);
            tblLotes.getColumnModel().getColumn(7).setPreferredWidth(100);
            tblLotes.getColumnModel().getColumn(7).setMaxWidth(100);
            tblLotes.getColumnModel().getColumn(8).setPreferredWidth(80);
            tblLotes.getColumnModel().getColumn(8).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
        );

        jLabel9.setText("Pesquisar:");

        txtPesquisarLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPesquisarLoteKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnlLoteLayout = new javax.swing.GroupLayout(pnlLote);
        pnlLote.setLayout(pnlLoteLayout);
        pnlLoteLayout.setHorizontalGroup(
            pnlLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoteLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarLote))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlLoteLayout.setVerticalGroup(
            pnlLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPesquisarLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlDados.addTab("Lotes", pnlLote);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Campanhas"));

        tblCampanhas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Campanha", "Data Início / Usuário", "Data Fim / Usuário", "Observações"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCampanhas.setSurrendersFocusOnKeystroke(true);
        tblCampanhas.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(tblCampanhas);
        if (tblCampanhas.getColumnModel().getColumnCount() > 0) {
            tblCampanhas.getColumnModel().getColumn(0).setMinWidth(0);
            tblCampanhas.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblCampanhas.getColumnModel().getColumn(0).setMaxWidth(0);
            tblCampanhas.getColumnModel().getColumn(2).setPreferredWidth(250);
            tblCampanhas.getColumnModel().getColumn(2).setMaxWidth(250);
            tblCampanhas.getColumnModel().getColumn(3).setPreferredWidth(250);
            tblCampanhas.getColumnModel().getColumn(3).setMaxWidth(250);
            tblCampanhas.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblCampanhas.getColumnModel().getColumn(4).setMaxWidth(200);
        }

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
        );

        txtPesquisarCampanhas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarCampanhasKeyReleased(evt);
            }
        });

        jLabel10.setText("Pesquisar:");

        javax.swing.GroupLayout pnlCampanhasLayout = new javax.swing.GroupLayout(pnlCampanhas);
        pnlCampanhas.setLayout(pnlCampanhasLayout);
        pnlCampanhasLayout.setHorizontalGroup(
            pnlCampanhasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCampanhasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCampanhasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCampanhasLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarCampanhas))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCampanhasLayout.setVerticalGroup(
            pnlCampanhasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCampanhasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCampanhasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisarCampanhas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlDados.addTab("Campanhas", pnlCampanhas);

        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder("Registros Deletados"));

        tblAuditoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "cor", "Id", "Início", "Fim", "Descrição", "Data Registro", "Usuário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblAuditoria);
        if (tblAuditoria.getColumnModel().getColumnCount() > 0) {
            tblAuditoria.getColumnModel().getColumn(0).setMinWidth(0);
            tblAuditoria.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblAuditoria.getColumnModel().getColumn(0).setMaxWidth(0);
            tblAuditoria.getColumnModel().getColumn(1).setMinWidth(0);
            tblAuditoria.getColumnModel().getColumn(1).setPreferredWidth(0);
            tblAuditoria.getColumnModel().getColumn(1).setMaxWidth(0);
            tblAuditoria.getColumnModel().getColumn(2).setMinWidth(180);
            tblAuditoria.getColumnModel().getColumn(2).setPreferredWidth(180);
            tblAuditoria.getColumnModel().getColumn(2).setMaxWidth(180);
            tblAuditoria.getColumnModel().getColumn(3).setMinWidth(180);
            tblAuditoria.getColumnModel().getColumn(3).setPreferredWidth(180);
            tblAuditoria.getColumnModel().getColumn(3).setMaxWidth(180);
            tblAuditoria.getColumnModel().getColumn(5).setMinWidth(180);
            tblAuditoria.getColumnModel().getColumn(5).setPreferredWidth(180);
            tblAuditoria.getColumnModel().getColumn(5).setMaxWidth(180);
            tblAuditoria.getColumnModel().getColumn(6).setMinWidth(120);
            tblAuditoria.getColumnModel().getColumn(6).setPreferredWidth(120);
            tblAuditoria.getColumnModel().getColumn(6).setMaxWidth(120);
        }

        jLabel8.setText("Pesquisar:");

        txtPesquisarAuditoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPesquisarAuditoriaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnlAuditoriaLayout = new javax.swing.GroupLayout(pnlAuditoria);
        pnlAuditoria.setLayout(pnlAuditoriaLayout);
        pnlAuditoriaLayout.setHorizontalGroup(
            pnlAuditoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditoriaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAuditoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)
                    .addGroup(pnlAuditoriaLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarAuditoria)))
                .addContainerGap())
        );
        pnlAuditoriaLayout.setVerticalGroup(
            pnlAuditoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAuditoriaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAuditoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisarAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlDados.addTab("Auditoria", pnlAuditoria);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Start"));

        tblStart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Descrição", "Data / Hora", "Usuário / Turno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStart.setSurrendersFocusOnKeystroke(true);
        tblStart.getTableHeader().setReorderingAllowed(false);
        tblStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStartMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(tblStart);
        if (tblStart.getColumnModel().getColumnCount() > 0) {
            tblStart.getColumnModel().getColumn(0).setMinWidth(0);
            tblStart.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblStart.getColumnModel().getColumn(0).setMaxWidth(0);
            tblStart.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblStart.getColumnModel().getColumn(2).setMaxWidth(150);
            tblStart.getColumnModel().getColumn(3).setPreferredWidth(180);
            tblStart.getColumnModel().getColumn(3).setMaxWidth(180);
        }

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
        );

        txtPesquisarTrocaTurno1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarTrocaTurno1KeyReleased(evt);
            }
        });

        jLabel12.setText("Pesquisar:");

        javax.swing.GroupLayout pnlStartLayout = new javax.swing.GroupLayout(pnlStart);
        pnlStart.setLayout(pnlStartLayout);
        pnlStartLayout.setHorizontalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStartLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarTrocaTurno1))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlStartLayout.setVerticalGroup(
            pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisarTrocaTurno1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlDados.addTab("Start", pnlStart);

        lblEquipamentoLogbook.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblEquipamentoLogbook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEquipamentoLogbook.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblIconeEquipamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_computer_128.png"))); // NOI18N
        lblIconeEquipamento.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblIconeEquipamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblIconeEquipamentoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIconeEquipamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEquipamentoLogbook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblEquipamentoLogbook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblIconeEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDados)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAlertaSolucaoReagente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAlertaSolucaoReagente)))
                .addGap(18, 18, 18)
                .addComponent(pnlDados)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
//        FrmLogMetodos frm = new FrmLogMetodos(null, true, sys_name);
//        frm.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnNovoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoRegistroActionPerformed
        int verificar_analise;
        if (!"Coluna OK".equals(lblColuna.getToolTipText())) {
            verificar_analise = 1;
        } else if (!"System Suitability OK".equals(lblSystem.getToolTipText())) {
            verificar_analise = 3;
        } else {
            verificar_analise = 0;
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        FrmNovoRegistro frm = new FrmNovoRegistro(null, true, sys_name,
                campanha_id, verificar_analise);
        frm.setVisible(true);
        atualizar();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnNovoRegistroActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        atualizar();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void lblIconeEquipamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblIconeEquipamentoMouseClicked
//        if (evt.getClickCount() == 2) {
//            FrmConfigCromatografo frm = new FrmConfigCromatografo(null, true, sys_name);
//            frm.setVisible(true);
//        }
    }//GEN-LAST:event_lblIconeEquipamentoMouseClicked

    private void txtPesquisarTrocaTurno1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarTrocaTurno1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarTrocaTurno1KeyReleased

    private void tblStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStartMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblStartMouseClicked

    private void txtPesquisarAuditoriaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarAuditoriaKeyPressed
        //        DefaultTableModel model = (DefaultTableModel) tblAuditoria.getModel();
        //        TableRowSorter sorter = new TableRowSorter<>(model);
        //        tblAuditoria.setRowSorter(sorter);
        //        String text = txtPesquisarAuditoria.getText().trim().toUpperCase();
        //        String parametro = "*";
        //        if (text.length() == 0) {
        //            sorter.setRowFilter(null);
        //        } else if (text.indexOf(parametro) > 0) {
        //            ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<>();
        //            andFilters.add(RowFilter.regexFilter("(?i)" + text.substring(0, text.indexOf(parametro)).trim().toUpperCase()));
        //            andFilters.add(RowFilter.regexFilter("(?i)" + text.substring(text.indexOf(parametro) + 1, text.length()).trim().toUpperCase()));
        //            sorter.setRowFilter(RowFilter.andFilter(andFilters));
        //        } else {
        //            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        //        }
    }//GEN-LAST:event_txtPesquisarAuditoriaKeyPressed

    private void txtPesquisarCampanhasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarCampanhasKeyReleased
        //        DefaultTableModel model = (DefaultTableModel) tblCampanhas.getModel();
        //        TableRowSorter sorter = new TableRowSorter<>(model);
        //        tblCampanhas.setRowSorter(sorter);
        //        String text = txtPesquisarCampanhas.getText().trim().toUpperCase();
        //        String parametro = "*";
        //        if (text.length() == 0) {
        //            sorter.setRowFilter(null);
        //        } else if (text.indexOf(parametro) > 0) {
        //            ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<>();
        //            andFilters.add(RowFilter.regexFilter("(?i)" + text.substring(0, text.indexOf(parametro)).trim().toUpperCase()));
        //            andFilters.add(RowFilter.regexFilter("(?i)" + text.substring(text.indexOf(parametro) + 1, text.length()).trim().toUpperCase()));
        //            sorter.setRowFilter(RowFilter.andFilter(andFilters));
        //        } else {
        //            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        //        }
    }//GEN-LAST:event_txtPesquisarCampanhasKeyReleased

    private void txtPesquisarLoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarLoteKeyPressed
        //        DefaultTableModel model = (DefaultTableModel) tblLotes.getModel();
        //        TableRowSorter sorter = new TableRowSorter<>(model);
        //        tblLotes.setRowSorter(sorter);
        //        String text = txtPesquisarLote.getText().trim().toUpperCase();
        //        String parametro = "*";
        //        if (text.length() == 0) {
        //            sorter.setRowFilter(null);
        //        } else if (text.indexOf(parametro) > 0) {
        //            ArrayList<RowFilter<Object, Object>> andFilters = new ArrayList<>();
        //            andFilters.add(RowFilter.regexFilter("(?i)" + text.substring(0, text.indexOf(parametro)).trim().toUpperCase()));
        //            andFilters.add(RowFilter.regexFilter("(?i)" + text.substring(text.indexOf(parametro) + 1, text.length()).trim().toUpperCase()));
        //            sorter.setRowFilter(RowFilter.andFilter(andFilters));
        //        } else {
        //            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        //        }
    }//GEN-LAST:event_txtPesquisarLoteKeyPressed

    private void tblLotesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblLotesKeyReleased
        //        if (tblLotes.getSelectedRow() != -1) {
        //            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
        //                int dialogResult = JOptionPane.showConfirmDialog(null,
        //                        "Deseja excluir a análise desse lote?", "Aviso", JOptionPane.YES_NO_OPTION);
        //                if (dialogResult == 0) {
        //                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //                    AnaliseCromatografo anlscro = new AnaliseCromatografo();
        //                    AnaliseCromatografoDAO anlscroDAO = new AnaliseCromatografoDAO();
        //                    anlscro.setLog_lote_id((Integer) tblLotes.getValueAt(tblLotes.getSelectedRow(), 0));
        //                    FrmSalvar frmSalvar = new FrmSalvar(null, true);
        //                    frmSalvar.setVisible(true);
        //                    if (FrmSalvar.senha()) {
        //                        anlscroDAO.deleteAnaliseCromatografo(anlscro);
        //                        atualizar();
        //                    }
        //                }
        //            }
        //        }
        //        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_tblLotesKeyReleased

    private void tblLotesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLotesMouseClicked
        //        if (evt.getClickCount() == 2) {
        //            if ("Em Análise".equals(tblLotes.getValueAt(tblLotes.getSelectedRow(), 5).toString())) {
        //                int dialogResult = JOptionPane.showConfirmDialog(null,
        //                        "Deseja finalizar essa análise desse lote?", "Aviso", JOptionPane.YES_NO_OPTION);
        //                if (dialogResult == 0) {
        //                    FrmSalvar frmSalvar = new FrmSalvar(null, true);
        //                    frmSalvar.setVisible(true);
        //                    if (FrmSalvar.senha()) {
        //                        updateLote((Integer) tblLotes.getValueAt(tblLotes.getSelectedRow(), 0));
        //                        atualizar();
        //                    }
        //                }
        //            }
        //        }
    }//GEN-LAST:event_tblLotesMouseClicked

    private void tblHistoricoSystemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHistoricoSystemMouseClicked
        //        int id = (Integer) tblHistoricoSystem.getValueAt(tblHistoricoSystem.getSelectedRow(), 0);
        //        if (evt.getClickCount() == 2) {
        //            if (tblHistoricoSystem.getSelectedRow() == 0) {
        //                if (!(Boolean) tblHistoricoSystem.getValueAt(tblHistoricoSystem.getSelectedRow(), 4)) {
        //                    FrmVerificarSystemCromatografo frm
        //                            = new FrmVerificarSystemCromatografo(null, true, id, sys_name, campanha_id);
        //                    frm.setVisible(true);
        //                    atualizar();
        //                    readHistoricoSystem();
        //                    readSistema();
        //                } else {
        //                    FrmVerificarSystemCromatografo frm = new FrmVerificarSystemCromatografo(null, true, id);
        //                    frm.setVisible(true);
        //                }
        //            } else {
        //                FrmVerificarSystemCromatografo frm = new FrmVerificarSystemCromatografo(null, true, id);
        //                frm.setVisible(true);
        //            }
        //        }
    }//GEN-LAST:event_tblHistoricoSystemMouseClicked

    private void tblRegistrosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblRegistrosKeyPressed
        //        if (tblRegistros.getSelectedRow() != -1) {
        //            if (tblRegistros.getSelectedRow() == 0) {
        //                if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
        //                    JPanel basePanel = new JPanel();
        //                    JPanel centerPanel = new JPanel();
        //                    campoMotivo.setText(null);
        //                    centerPanel.add(textoMotivo);
        //                    centerPanel.add(campoMotivo);
        //                    basePanel.add(centerPanel);
        //
        //                    if (tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 4).toString().startsWith("NOVA")
        //                            || tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 4).toString().startsWith("FIM")) {
        //                        JOptionPane.showMessageDialog(null, "Esse registro não pode ser excluído",
        //                                "Excluir Registro", JOptionPane.INFORMATION_MESSAGE);
        //                    } else {
        //                        int selection = JOptionPane.showConfirmDialog(null, basePanel,
        //                                "Deseja excluir essa linha?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        //                        if (selection == JOptionPane.OK_OPTION) {
        //                            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //                            FrmSalvar frmSalvar = new FrmSalvar(null, true);
        //                            frmSalvar.setVisible(true);
        //                            if (FrmSalvar.senha()) {
        //                                deletarLinha((Integer) tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 1),
        //                                        campoMotivo.getText());
        //                                FaseMovel fase = new FaseMovel();
        //                                FaseMovelDAO faseDAO = new FaseMovelDAO();
        //                                Cromatografo equip = new Cromatografo();
        //                                Coluna col = new Coluna();
        //                                ColunaDAO colDAO = new ColunaDAO();
        //                                equip.setSystem_name(sys_name);
        //                                col.setCromatografo(equip);
        //                                fase.setCromatografo(equip);
        //                                if (tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 4).toString().startsWith("TROCA DE FASE")) {
        //
        //                                    int idFase = faseDAO.selectIDUltimaFaseMovelBySystem(fase);
        //                                    if (idFase > 0) {
        //                                        fase.setFase_movel_id(idFase);
        //                                        fase.setData_registro(DataHora.getTimestampDate(new Date()));
        //                                        fase.setData_fim(DataHora.getTimestampDate(new Date()));
        //                                        faseDAO.updateFimLogFaseMovel(fase);
        //                                    }
        //                                    updateDeleteFaseMovel((Integer) tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 1));
        //                                }
        //                                if (tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 4).toString().startsWith("TROCA DE COLUNA")) {
        //
        //                                    int idCol = colDAO.selectIDUltimaColunaBySystem(col);
        //                                    if (idCol > 0) {
        //                                        col.setLog_coluna_id(idCol);
        //                                        col.setData_registro_log(DataHora.getTimestampDate(new Date()));
        //                                        col.setData_fim_log(DataHora.getTimestampDate(new Date()));
        //                                        colDAO.updateFimLogColuna(col);
        //                                    }
        //                                    updateDeleteColuna((Integer) tblRegistros.getValueAt(tblRegistros.getSelectedRow(), 1));
        //                                }
        //                                readLog();
        //                                updateUltimaLinha((Integer) tblRegistros.getValueAt(0, 1));
        //                                atualizar();
        //                            }
        //                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //                        }
        //                    }
        //                }
        //            }
        //        }
    }//GEN-LAST:event_tblRegistrosKeyPressed

    private void txtPesquisarMetodologiaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarMetodologiaKeyReleased
        TableSorter.TableSorter(tblTrocaTurno, txtPesquisarMetodologia);
    }//GEN-LAST:event_txtPesquisarMetodologiaKeyReleased

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        criarTrocaTurno();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tblTrocaTurno.getSelectedRow() != -1) {
            editarTrocaTurno();
            readTrocaTurno();
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (tblTrocaTurno.getSelectedRow() != -1) {
            deletarTrocaTurno();
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void cmbLimitPorPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLimitPorPaginaActionPerformed
        readTrocaTurno();
    }//GEN-LAST:event_cmbLimitPorPaginaActionPerformed

    private void tblTrocaTurnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTrocaTurnoMouseClicked
        if (evt.getClickCount() == 2) {
            editarTrocaTurno();
        }
    }//GEN-LAST:event_tblTrocaTurnoMouseClicked

    private void btnAtualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizar1ActionPerformed
        readTrocaTurno();
    }//GEN-LAST:event_btnAtualizar1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnAtualizar1;
    public static javax.swing.JButton btnEditar;
    public static javax.swing.JButton btnExcluir;
    public static javax.swing.JButton btnNovo;
    private javax.swing.JButton btnNovoRegistro;
    private javax.swing.JComboBox<String> cmbLimitPorPagina;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblAlertaSolucaoReagente;
    private javax.swing.JLabel lblColuna;
    public javax.swing.JLabel lblEquipamentoLogbook;
    private javax.swing.JLabel lblFaseMovel;
    private javax.swing.JLabel lblIconeEquipamento;
    private javax.swing.JLabel lblStart;
    private javax.swing.JLabel lblSystem;
    private javax.swing.JPanel pnlAuditoria;
    private javax.swing.JPanel pnlCampanhas;
    private javax.swing.JTabbedPane pnlDados;
    private javax.swing.JPanel pnlFaseMovel;
    private javax.swing.JPanel pnlLote;
    private javax.swing.JPanel pnlRegistros;
    private javax.swing.JPanel pnlStart;
    private javax.swing.JPanel pnlSystem;
    private javax.swing.JPanel pnlTrocaTurno;
    private javax.swing.JRadioButton rbtFiltroNao;
    private javax.swing.JRadioButton rbtFiltroSim;
    private javax.swing.JRadioButton rbtPreColunaNao;
    private javax.swing.JRadioButton rbtPreColunaSim;
    private javax.swing.JRadioButton rbtSentidoDireto;
    private javax.swing.JRadioButton rbtSentidoInverso;
    private javax.swing.JTable tblAuditoria;
    private javax.swing.JTable tblCampanhas;
    private javax.swing.JTable tblHistoricoSystem;
    private javax.swing.JTable tblLotes;
    private javax.swing.JTable tblRegistros;
    private javax.swing.JTable tblStart;
    private javax.swing.JTable tblTrocaTurno;
    private javax.swing.JTextField txtAnaliseColuna;
    private javax.swing.JTextField txtAtivacaoColuna;
    private javax.swing.JTextField txtCampanha;
    private javax.swing.JTextField txtCanalA;
    private javax.swing.JTextField txtCanalB;
    private javax.swing.JTextField txtCanalC;
    private javax.swing.JTextField txtCanalD;
    private javax.swing.JTextField txtCanalE;
    private javax.swing.JTextField txtCanalF;
    private javax.swing.JTextField txtCodigoColuna;
    private javax.swing.JTextField txtDiametroColuna;
    private javax.swing.JTextField txtFabricanteColuna;
    private javax.swing.JTextField txtInicioCampanha;
    private javax.swing.JTextField txtLoteCanalA;
    private javax.swing.JTextField txtLoteCanalB;
    private javax.swing.JTextField txtLoteCanalC;
    private javax.swing.JTextField txtLoteCanalD;
    private javax.swing.JTextField txtLoteCanalE;
    private javax.swing.JTextField txtLoteCanalF;
    private javax.swing.JTextField txtMarcaColuna;
    private javax.swing.JTextField txtMetodoColuna;
    private javax.swing.JTextField txtObs;
    private javax.swing.JTextField txtObsColuna;
    private javax.swing.JTextField txtParticulaColuna;
    private javax.swing.JTextField txtPesquisarAuditoria;
    private javax.swing.JTextField txtPesquisarCampanhas;
    private javax.swing.JTextField txtPesquisarLote;
    private javax.swing.JTextField txtPesquisarMetodologia;
    private javax.swing.JTextField txtPesquisarTrocaTurno1;
    private javax.swing.JTextField txtPrevisao;
    private javax.swing.JTextField txtQtCanalA;
    private javax.swing.JTextField txtQtCanalB;
    private javax.swing.JTextField txtQtCanalC;
    private javax.swing.JTextField txtQtCanalD;
    private javax.swing.JTextField txtSetorColuna;
    private javax.swing.JTextField txtTamanhoColuna;
    private javax.swing.JTextField txtVagaColuna;
    private javax.swing.JTextField txtValidadeCanalA;
    private javax.swing.JTextField txtValidadeCanalB;
    private javax.swing.JTextField txtValidadeCanalC;
    private javax.swing.JTextField txtValidadeCanalD;
    private javax.swing.JTextField txtValidadeCanalE;
    private javax.swing.JTextField txtValidadeCanalF;
    // End of variables declaration//GEN-END:variables

    private void atualizar() {
//        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        limparCampos();
//        carregarCampanha();
//        carregarFaseMovel();
//        carregarColuna();
//        readHistoricoFaseMovel();
//        readHistoricoColuna();
//        readHistoricoSystem();
//        readLog();
//        readStart();
//        readSistema();
        readTrocaTurno();
//        readAuditoria();
//        readCampanha();
//        readLotes();
//        repaint();
//        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void readLog() {
//        GridlineCellRenderer r = new GridlineCellRenderer(1, 2, 3, 4, 5, 6, 7, 8, 9);
//        DefaultTableModel model = (DefaultTableModel) tblRegistros.getModel();
//        tblRegistros.setDefaultRenderer(Object.class, r);
//        CromatografoDAO equipDao = new CromatografoDAO();
//        model.setNumRows(0);
//        for (Cromatografo equip : equipDao.readLogCromatografo(sys_name)) {
//            model.addRow(new Object[]{
//                equip.getAnalise().getCor(),
//                equip.getLog_cromatografo_id(),
//                DataHora.getStringDateTimeSimple(equip.getData_inicio()),
//                DataHora.getStringDateTimeSimple(equip.getData_fim()),
//                equip.getAnalise().getAnalise_status()
//                + " - " + equip.getDescricao()
//                + (equip.getObs_log() == null ? "" : " - " + equip.getObs_log()),
//                DataHora.getStringDateTime(equip.getData_registro()),
//                equip.getUsuario().getUser()
//            });
//        }
    }

    private void readAuditoria() {
//        DefaultTableModel model = (DefaultTableModel) tblAuditoria.getModel();
//        CromatografoDAO equipDao = new CromatografoDAO();
//        model.setNumRows(0);
//        for (Cromatografo equip : equipDao.readLogCromatografoAuditoria(sys_name)) {
//            model.addRow(new Object[]{
//                equip.getAnalise().getCor(),
//                equip.getLog_cromatografo_id(),
//                DataHora.getStringDateTime(equip.getData_inicio()),
//                DataHora.getStringDateTime(equip.getData_fim()),
//                equip.getAnalise().getAnalise_status()
//                + " - " + equip.getDescricao()
//                + (equip.getObs_log() == null ? "" : " - Motivo: " + equip.getObs_log()),
//                DataHora.getStringDateTime(equip.getData_registro()),
//                equip.getUsuario().getUser()
//            });
//        }
    }

    private void criarTrocaTurno() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        FrmTrocaTurno frm = new FrmTrocaTurno(null, true, sys_name);
        frm.setVisible(true);
        readTrocaTurno();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void editarTrocaTurno() {
        if (AcessoSistema.editarDados(ACESSO)) {
            boolean salvar = false;
            if (tblTrocaTurno.getSelectedRow() == 0 
                    && (System.getProperty("user").equals(tblTrocaTurno.getValueAt(tblTrocaTurno.getSelectedRow(), 4)))) {
                salvar = true;
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            FrmTrocaTurno frm = new FrmTrocaTurno(null, true,
                    (Long) tblTrocaTurno.getValueAt(tblTrocaTurno.getSelectedRow(), 0),
                    false, salvar, sys_name);
            frm.setVisible(true);
            readTrocaTurno();
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void deletarTrocaTurno() {
        TrocaTurnoDAO turnoDAO = new TrocaTurnoDAO();
        try {
            if (tblTrocaTurno.getSelectedRow() == 0 && System.getProperty("user") == tblTrocaTurno.getValueAt(tblTrocaTurno.getSelectedRow(), 4)) {
                int dialogResult = JOptionPane.showConfirmDialog(null,
                        "Realmente Deseja Excluir Esse Registro?", "Aviso", JOptionPane.YES_NO_OPTION);
                if (dialogResult == 0) {
                    Senha senha = new Senha();
                    if (senha.Salvar()) {
                        turnoDAO.remover(TrocaTurno.class, (Long) tblTrocaTurno.getValueAt(tblTrocaTurno.getSelectedRow(), 0));
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atulalizar dados: " + e);
        } finally {
            readTrocaTurno();
        }
    }

    private void readTrocaTurno() {
        try {
            TrocaTurnoDAO turnoDAO = new TrocaTurnoDAO();
            DefaultTableModel model = (DefaultTableModel) tblTrocaTurno.getModel();
            model.setNumRows(0);
            for (TrocaTurno turno : turnoDAO.findByAgrupador(sys_name, Integer.parseInt(cmbLimitPorPagina.getSelectedItem().toString()))) {
                model.addRow(new Object[]{
                    turno.getId(),
                    turno.getTurno().getTurno(),
                    turno.getPassagem(),
                    DataHora.getStringDateTime(turno.getDataRegistro()),
                    turno.getUsuario().getUsuario()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

    private void readStart() {
//        DefaultTableModel model = (DefaultTableModel) tblStart.getModel();
//        StartDAO startDao = new StartDAO();
//        model.setNumRows(0);
//        for (Start start : startDao.readStart(sys_name)) {
//            model.addRow(new Object[]{
//                start.getLog_start_id(),
//                start.getAnalise().getAnalise_status()
//                + " - " + start.getDescricao(),
//                DataHora.getStringDateTime(start.getData_registro()),
//                start.getUsuario().getUser()
//                + " - " + start.getUsuario().getTurno()
//            });
//        }
    }

    private void carregarCampanha() {
//        try {
//            Campanha camp = new Campanha();
//            Cromatografo equip = new Cromatografo();
//            CampanhaDAO campDao = new CampanhaDAO();
//            equip.setSystem_name(sys_name);
//            camp.setCromatografo(equip);
//            campDao.selectCampanhaBySystem(camp);
//            campanha_id = camp.getLog_campanha_id();
//            txtCampanha.setText(camp.getNome_campanha());
//            txtInicioCampanha.setText(DataHora.getStringDateTime(camp.getData_inicio()));
//            txtObs.setText(camp.getObs_campanha());
//            txtPrevisao.setText(DataHora.getStringDateTime(camp.getPrevisao()));
//            switch (camp.getCor()) {
//                case "Roxo":
//                    txtPrevisao.setBackground(Color.MAGENTA.darker());
//                    break;
//                case "Vermelho":
//                    txtPrevisao.setBackground(Color.RED.darker());
//                    break;
//                case "Rosa":
//                    txtPrevisao.setBackground(Color.PINK.darker());
//                    break;
//                case "Laranja":
//                    txtPrevisao.setBackground(Color.ORANGE.darker());
//                    break;
//                case "Amarelo":
//                    txtPrevisao.setBackground(Color.YELLOW);
//                    break;
//                default:
//                    txtPrevisao.setBackground(Color.WHITE);
//                    break;
//            }
//        } catch (Exception e) {
//
//        }
    }

    private void readCampanha() {
//        try {
//            CampanhaDAO campDao = new CampanhaDAO();
//            DefaultTableModel model = (DefaultTableModel) tblCampanhas.getModel();
//            model.setNumRows(0);
//            for (Campanha camp : campDao.selectAllCampanhaBySystem(sys_name)) {
//                model.addRow(new Object[]{
//                    camp.getLog_campanha_id(),
//                    camp.getNome_campanha(),
//                    DataHora.getStringDateTime(camp.getData_inicio())
//                    + " - " + camp.getUser_inicio().getUser(),
//                    camp.getData_fim() == null ? ""
//                    : DataHora.getStringDateTime(camp.getData_fim())
//                    + " - " + camp.getUser_fim().getUser(),
//                    camp.getObs_campanha()
//                });
//            }
//        } catch (Exception e) {
//        
//        }
    }

    private void carregarFaseMovel() {
//        FaseMovel fase = new FaseMovel();
//        FaseMovelDAO faseDAO = new FaseMovelDAO();
//        Cromatografo equip = new Cromatografo();
//        equip.setSystem_name(sys_name);
//        fase.setCromatografo(equip);
//        faseDAO.selectUltimaFaseMovelBySystem(fase);
//        if (fase.getData_fim() == null) {
//            txtCanalA.setText(fase.getFase_movel_a());
//            txtQtCanalA.setText(Integer.toString(fase.getFase_movel_a_qt()));
//            txtLoteCanalA.setText(fase.getFase_movel_a_lote());
//            txtValidadeCanalA.setText(DataHora.getStringDate(fase.getFase_movel_a_validade()));
//            txtCanalB.setText(fase.getFase_movel_b());
//            txtQtCanalB.setText(Integer.toString(fase.getFase_movel_b_qt()));
//            txtLoteCanalB.setText(fase.getFase_movel_b_lote());
//            txtValidadeCanalB.setText(DataHora.getStringDate(fase.getFase_movel_b_validade()));
//            txtCanalC.setText(fase.getFase_movel_c());
//            txtQtCanalC.setText(Integer.toString(fase.getFase_movel_c_qt()));
//            txtLoteCanalC.setText(fase.getFase_movel_c_lote());
//            txtValidadeCanalC.setText(DataHora.getStringDate(fase.getFase_movel_c_validade()));
//            txtCanalD.setText(fase.getFase_movel_d());
//            txtQtCanalD.setText(Integer.toString(fase.getFase_movel_d_qt()));
//            txtLoteCanalD.setText(fase.getFase_movel_d_lote());
//            txtValidadeCanalD.setText(DataHora.getStringDate(fase.getFase_movel_d_validade()));
//            txtCanalE.setText(fase.getFase_movel_e());
//            txtLoteCanalE.setText(fase.getFase_movel_e_lote());
//            txtValidadeCanalE.setText(DataHora.getStringDate(fase.getFase_movel_e_validade()));
//            txtCanalF.setText(fase.getFase_movel_f());
//            txtLoteCanalF.setText(fase.getFase_movel_f_lote());
//            txtValidadeCanalF.setText(DataHora.getStringDate(fase.getFase_movel_f_validade()));
//        }
    }

    private void readHistoricoFaseMovel() {
//        DefaultTableModel model = (DefaultTableModel) tblHistoricoFaseMovel.getModel();
//        FaseMovelDAO faseDAO = new FaseMovelDAO();
//        model.setNumRows(0);
//        for (FaseMovel fase : faseDAO.readFaseMovelBySystem(sys_name)) {
//            model.addRow(new Object[]{
//                "Canal A: "
//                + fase.getFase_movel_a().toUpperCase() + " - Lote: "
//                + fase.getFase_movel_a_lote().toUpperCase() + " - "
//                + fase.getFase_movel_a_qt() + "% / "
//                + "Canal B: "
//                + fase.getFase_movel_b().toUpperCase() + " - Lote: "
//                + fase.getFase_movel_b_lote().toUpperCase() + " - "
//                + fase.getFase_movel_b_qt() + "% / "
//                + "Canal C: "
//                + fase.getFase_movel_c().toUpperCase() + " - Lote: "
//                + fase.getFase_movel_c_lote().toUpperCase() + " - "
//                + fase.getFase_movel_c_qt() + "% / "
//                + "Canal D: "
//                + fase.getFase_movel_d().toUpperCase() + " - Lote: "
//                + fase.getFase_movel_d_lote().toUpperCase() + "% - "
//                + fase.getFase_movel_d_qt(),
//                fase.getCampanha().getNome_campanha(),
//                fase.getUser().getUser(),
//                DataHora.getStringDateTime(fase.getData_registro())
//            });
//        }
    }

    private void readHistoricoColuna() {
//        DefaultTableModel model = (DefaultTableModel) tblHistoricoColuna.getModel();
//        ColunaDAO colDAO = new ColunaDAO();
//        model.setNumRows(0);
//        for (Coluna col : colDAO.readColunaBySystem(sys_name)) {
//            model.addRow(new Object[]{
//                "CQ-" + col.getTipo_coluna()
//                + "-" + zeros.substring(String.valueOf(col.getColuna_id()).length())
//                + String.valueOf(col.getCodigo_coluna()) + " | "
//                + col.getFabricante_coluna() + " - "
//                + col.getMarca_coluna() + " | "
//                + col.getTamanho_coluna() + "mm x "
//                + col.getDiametro_coluna() + "mm x "
//                + col.getParticula_coluna() + "um | "
//                + col.getMetodologia().getCod_metodo(),
//                col.getCampanha().getNome_campanha(),
//                col.getUser_log_coluna().getUser(),
//                DataHora.getStringDateTime(col.getData_registro_log())
//            });
//        }
    }

    private void carregarColuna() {
//        try {
//            Coluna col = new Coluna();
//            ColunaDAO colDAO = new ColunaDAO();
//            Cromatografo equip = new Cromatografo();
//            equip.setSystem_name(sys_name);
//            col.setCromatografo(equip);
//            colDAO.selectUltimaColunaBySystem(col);
//            if (col.getData_fim_log() == null) {
//                coluna_id = (Integer) col.getColuna_id();
//                txtCodigoColuna.setText(col.getTipo_coluna() == null ? ""
//                        : "CQ-" + col.getTipo_coluna()
//                        + "-" + zeros.substring(String.valueOf(col.getCodigo_coluna()).length())
//                        + String.valueOf(col.getCodigo_coluna()));
//                txtAnaliseColuna.setText((col.getAnalise().getAnalise() == null
//                        || col.getAnalise().getAnalise().isEmpty())
//                                ? "MULTIPROPÓSITO" : col.getAnalise().getAnalise());
//                txtAtivacaoColuna.setText(DataHora.getStringDate(col.getData_ativacao_coluna()));
//                txtDiametroColuna.setText(col.getDiametro_coluna());
//                txtFabricanteColuna.setText(col.getFabricante_coluna());
//                txtMarcaColuna.setText(col.getMarca_coluna());
//                txtMetodoColuna.setText((col.getMetodologia().getMetodo() == null
//                        || col.getMetodologia().getMetodo().isEmpty())
//                                ? "MULTIPROPÓSITO" : col.getMetodologia().getMetodo());
//                txtObsColuna.setText(col.getObs_coluna());
//                txtParticulaColuna.setText(col.getParticula_coluna());
//                txtSetorColuna.setText(col.getSetor().getSetor());
//                txtTamanhoColuna.setText(col.getTamanho_coluna());
//                txtVagaColuna.setText(String.valueOf("Gaveta: " + (int) Math.ceil((double) col.getVaga_coluna() / 19)
//                        + " - Vaga: " + col.getVaga_coluna()));
//                rbtSentidoDireto.setSelected(col.getSentido());
//                rbtSentidoInverso.setSelected(!col.getSentido());
//                rbtFiltroSim.setSelected(col.getPrefiltro());
//                rbtFiltroNao.setSelected(!col.getPrefiltro());
//                rbtPreColunaSim.setSelected(col.getPrecoluna());
//                rbtPreColunaNao.setSelected(!col.getPrecoluna());
//            }
//        } catch (Exception e) {
//        }
    }

    private void readHistoricoSystem() {
//        DefaultTableModel model = (DefaultTableModel) tblHistoricoSystem.getModel();
//        SystemSuitabilityDAO systemDAO = new SystemSuitabilityDAO();
//        model.setNumRows(0);
//        for (SystemSuitability system : systemDAO.readSystemSuitabilityBySystem(sys_name)) {
//            model.addRow(new Object[]{
//                system.getSystem_suitability_id(),
//                system.getSolucao_1() + " "
//                + "Qtd:" + system.getNumero_solucao_1()
//                + " (" + system.getDescricao_solucao_1() + ") | "
//                + (("".equals(system.getSolucao_2()))
//                ? "" : (system.getSolucao_2() + " "
//                + "Qtd:" + system.getNumero_solucao_2()
//                + " (" + system.getDescricao_solucao_2() + ") | "))
//                + (("".equals(system.getSolucao_3()))
//                ? "" : (system.getSolucao_3()
//                + " " + "Qtd:" + system.getNumero_solucao_3()
//                + " (" + system.getDescricao_solucao_3() + ") | "))
//                + (("".equals(system.getSolucao_4()))
//                ? "" : (system.getSolucao_4()
//                + " " + "Qtd:" + system.getNumero_solucao_4()
//                + " (" + system.getDescricao_solucao_4() + ") | "))
//                + (("".equals(system.getSolucao_5()))
//                ? "" : (system.getSolucao_5()
//                + " " + "Qtd:" + system.getNumero_solucao_5()
//                + " (" + system.getDescricao_solucao_5() + ") | "))
//                + (("".equals(system.getSolucao_6()))
//                ? "" : (system.getSolucao_6()
//                + " " + "Qtd:" + system.getNumero_solucao_6()
//                + " (" + system.getDescricao_solucao_6() + ") | "))
//                + (("".equals(system.getSolucao_7()))
//                ? "" : (system.getSolucao_7()
//                + " " + "Qtd:" + system.getNumero_solucao_7()
//                + " (" + system.getDescricao_solucao_7() + ") | "))
//                + (("".equals(system.getSolucao_8()))
//                ? "" : (system.getSolucao_8()
//                + " " + "Qtd:" + system.getNumero_solucao_8()
//                + " (" + system.getDescricao_solucao_8() + ") - "))
//                + (("".equals(system.getSolucao_9()))
//                ? "" : (system.getSolucao_9()
//                + " " + "Qtd:" + system.getNumero_solucao_9()
//                + " (" + system.getDescricao_solucao_9() + ") | ")),
//                system.getCampanha().getNome_campanha(),
//                DataHora.getStringDateTime(system.getData_registro()),
//                system.getCheck_system_suitability(),
//                system.getUser_check().getUser()
//            });
//        }
    }

    private void deletarLinha(int id, String obs) {
//        Cromatografo equip = new Cromatografo();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        Usuario user = new Usuario();
//        try {
//            equip.setLog_cromatografo_id(id);
//            equip.setData_registro(DataHora.getTimestampDate(new Date()));
//            equip.setObs_log(obs);
//            equip.setLog_ativo(false);
//            user.setUser(System.getProperty("user"));
//            equip.setUsuario(user);
//            equipDAO.updateDeleteLogCromatografo(equip);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
//        }
    }

    private void updateUltimaLinha(int id) {
//        Cromatografo equip = new Cromatografo();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        Usuario user = new Usuario();
//        try {
//            equip.setLog_cromatografo_id(id);
//            equip.setData_registro(DataHora.getTimestampDate(new Date()));
//            user.setUser(System.getProperty("user"));
//            equip.setUsuario(user);
//            equipDAO.updateUltimoFimLogCromatografo(equip);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
//        }
    }

    private void updateDeleteFaseMovel(int id) {
//        Cromatografo equip = new Cromatografo();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        FaseMovel fase = new FaseMovel();
//        try {
//            equip.setLog_cromatografo_id(id);
//            fase.setFase_movel_id(0);
//            equip.setFasemovel(fase);
//            equipDAO.updateFaseMovelLogCromatografo(equip);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
//        }
    }

    private void updateDeleteColuna(int id) {
//        Cromatografo equip = new Cromatografo();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        Coluna col = new Coluna();
//        try {
//            equip.setLog_cromatografo_id(id);
//            col.setColuna_id(0);
//            equip.setColuna(col);
//            equipDAO.updateColunaLogCromatografo(equip);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
//        }
    }

    private void limparCampos() {
//        txtCanalA.setText("");
//        txtQtCanalA.setText("");
//        txtLoteCanalA.setText("");
//        txtValidadeCanalA.setText("");
//        txtCanalB.setText("");
//        txtQtCanalB.setText("");
//        txtLoteCanalB.setText("");
//        txtValidadeCanalB.setText("");
//        txtCanalC.setText("");
//        txtQtCanalC.setText("");
//        txtLoteCanalC.setText("");
//        txtValidadeCanalC.setText("");
//        txtCanalD.setText("");
//        txtQtCanalD.setText("");
//        txtLoteCanalD.setText("");
//        txtValidadeCanalD.setText("");
//        txtCodigoColuna.setText("");
//        txtAnaliseColuna.setText("");
//        txtAtivacaoColuna.setText("");
//        txtDiametroColuna.setText("");
//        txtFabricanteColuna.setText("");
//        txtMarcaColuna.setText("");
//        txtMetodoColuna.setText("");
//        txtObsColuna.setText("");
//        txtParticulaColuna.setText("");
//        txtSetorColuna.setText("");
//        txtTamanhoColuna.setText("");
//        txtVagaColuna.setText("");
//        rbtSentidoDireto.setSelected(false);
//        rbtSentidoInverso.setSelected(false);
//        rbtFiltroSim.setSelected(false);
//        rbtFiltroNao.setSelected(false);
//        rbtPreColunaSim.setSelected(false);
//        rbtPreColunaNao.setSelected(false);
    }

    public void readLotes() {
//        Cromatografo equip = new Cromatografo();
//        CromatografoDAO equipDAO = new CromatografoDAO();
//        equip.setSystem_name(sys_name);
//        equipDAO.selectCromatografoByName(equip);
//        DefaultTableModel model = (DefaultTableModel) tblLotes.getModel();
//        AnaliseCromatografoDAO anlscroDao = new AnaliseCromatografoDAO();
//        model.setNumRows(0);
//        for (AnaliseCromatografo anlscro : anlscroDao.readAnaliseCromatografo(equip)) {
//            model.addRow(new Object[]{
//                anlscro.getLog_lote_id(),
//                anlscro.getMaterial().getNome_material(),
//                anlscro.getAnalise().getAnalise()
//                + (anlscro.getObs() == null ? "" : " - " + anlscro.getObs()),
//                anlscro.getLote().getLote_produto(),
//                anlscro.getCampanha().getNome_campanha(),
//                anlscro.getStatus(),
//                DataHora.getStringDateTime(anlscro.getData_hora_registro()),
//                anlscro.getUser_registro().getUser(),
//                anlscro.getRetrabalho_lote()
//            });
//        }
    }

    private void updateLote(int id) {
//        AnaliseCromatografo anlscro = new AnaliseCromatografo();
//        AnaliseCromatografoDAO anlscroDao = new AnaliseCromatografoDAO();
//        Usuario user = new Usuario();
//        user.setUser(System.getProperty("user"));
//        try {
//            anlscro.setLog_lote_id(id);
//            anlscro.setStatus("Finalizado");
//            anlscro.setData_hora_fim(DataHora.getTimestampDate(new Date()));
//            anlscro.setData_hora_registro(DataHora.getTimestampDate(new Date()));
//            anlscro.setUser_fim(user);
//            anlscro.setUser_registro(user);
//            anlscroDao.updateFimLote(anlscro);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
//        }
    }

    private void readSistema() {
//        ImageIcon icone_ok = new ImageIcon(getClass().getResource("/img/icon_ok.png"));
//        ImageIcon icone_erro = new ImageIcon(getClass().getResource("/img/icon_cancel.png"));
//
//        String currentdate = DataHora.getStringDate(new Date());
//        Date currentDate = new Date();
//        Calendar cal = Calendar.getInstance();
//        cal.setTime(currentDate);
//        cal.add(Calendar.DATE, 8);
//
//        boolean statusCanalA = false;
//        boolean statusCanalB;
//        boolean statusCanalC;
//        boolean statusCanalD;
//        boolean statusCanalE;
//        boolean statusCanalF;
//
//        if (!"".equals(txtValidadeCanalA.getText())) {
//            if (!DataHora.getTimestampDate(txtValidadeCanalA.getText()).after(DataHora.getTimestampDate(currentdate))) {
//                if (!DataHora.getTimestampDate(txtValidadeCanalA.getText()).equals(DataHora.getTimestampDate(currentdate))) {
//                    JOptionPane.showMessageDialog(null,
//                            "Validade da Fase Móvel do Canal A está vencida", "Fase Móvel", JOptionPane.ERROR_MESSAGE);
//                    statusCanalA = false;
//                } else {
//                    statusCanalA = true;
//                }
//            } else {
//                statusCanalA = true;
//            }
//        }
//
//        if (!"".equals(txtValidadeCanalB.getText())) {
//            if (!DataHora.getTimestampDate(txtValidadeCanalB.getText()).after(DataHora.getTimestampDate(currentdate))) {
//                if (!DataHora.getTimestampDate(txtValidadeCanalB.getText()).equals(DataHora.getTimestampDate(currentdate))) {
//                    JOptionPane.showMessageDialog(null,
//                            "Validade da Fase Móvel do Canal B está vencida", "Fase Móvel", JOptionPane.ERROR_MESSAGE);
//                    statusCanalB = false;
//                } else {
//                    statusCanalB = true;
//                }
//            } else {
//                statusCanalB = true;
//            }
//        } else {
//            statusCanalB = true;
//        }
//
//        if (!"".equals(txtValidadeCanalC.getText())) {
//            if (!DataHora.getTimestampDate(txtValidadeCanalC.getText()).after(DataHora.getTimestampDate(currentdate))) {
//                if (!DataHora.getTimestampDate(txtValidadeCanalC.getText()).equals(DataHora.getTimestampDate(currentdate))) {
//                    JOptionPane.showMessageDialog(null,
//                            "Validade da Fase Móvel do Canal C está vencida", "Fase Móvel", JOptionPane.ERROR_MESSAGE);
//                    statusCanalC = false;
//                } else {
//                    statusCanalC = true;
//                }
//            } else {
//                statusCanalC = true;
//            }
//        } else {
//            statusCanalC = true;
//        }
//
//        if (!"".equals(txtValidadeCanalD.getText())) {
//            if (!DataHora.getTimestampDate(txtValidadeCanalD.getText()).after(DataHora.getTimestampDate(currentdate))) {
//                if (!DataHora.getTimestampDate(txtValidadeCanalD.getText()).equals(DataHora.getTimestampDate(currentdate))) {
//                    JOptionPane.showMessageDialog(null,
//                            "Validade da Fase Móvel do Canal D está vencida", "Fase Móvel", JOptionPane.ERROR_MESSAGE);
//                    statusCanalD = false;
//                } else {
//                    statusCanalD = true;
//                }
//            } else {
//                statusCanalD = true;
//            }
//        } else {
//            statusCanalD = true;
//        }
//
//        if (!"".equals(txtValidadeCanalE.getText())) {
//            if (!DataHora.getTimestampDate(txtValidadeCanalE.getText()).after(DataHora.getTimestampDate(currentdate))) {
//                if (!DataHora.getTimestampDate(txtValidadeCanalE.getText()).equals(DataHora.getTimestampDate(currentdate))) {
//                    JOptionPane.showMessageDialog(null,
//                            "Validade da Solução do Autoinjetor está vencida", "Autoinjetor", JOptionPane.ERROR_MESSAGE);
//                    statusCanalE = false;
//                } else {
//                    statusCanalE = true;
//                }
//            } else {
//                statusCanalE = true;
//            }
//        } else {
//            statusCanalE = true;
//        }
//
//        if (!"".equals(txtValidadeCanalF.getText())) {
//            if (!DataHora.getTimestampDate(txtValidadeCanalF.getText()).after(DataHora.getTimestampDate(currentdate))) {
//                if (!DataHora.getTimestampDate(txtValidadeCanalF.getText()).equals(DataHora.getTimestampDate(currentdate))) {
//                    JOptionPane.showMessageDialog(null,
//                            "Validade da Solução do Selo Pistão está vencida", "Selo Pistão", JOptionPane.ERROR_MESSAGE);
//                    statusCanalF = false;
//                } else {
//                    statusCanalF = true;
//                }
//            } else {
//                statusCanalF = true;
//            }
//        } else {
//            statusCanalF = true;
//        }
//
//        if (statusCanalA && statusCanalB && statusCanalC && statusCanalD && statusCanalE && statusCanalF) {
//            lblFaseMovel.setIcon(icone_ok);
//            lblFaseMovel.setToolTipText("Fase Móvel OK");
//            repaint();
//        } else {
//            lblFaseMovel.setIcon(icone_erro);
//            lblFaseMovel.setToolTipText("Fase Móvel inválida");
//            repaint();
//        }
//
//        if (coluna_id > 0 && !"".equals(txtCodigoColuna.getText())) {
//            lblColuna.setIcon(icone_ok);
//            lblColuna.setToolTipText("Coluna OK");
//            repaint();
//        } else {
//            lblColuna.setIcon(icone_erro);
//            lblColuna.setToolTipText("Coluna inválida");
//            repaint();
//        }
//
//        if (tblHistoricoSystem.getRowCount() > 0) {
//            SystemSuitability system = new SystemSuitability();
//            SystemSuitabilityDAO systemDAO = new SystemSuitabilityDAO();
//            Cromatografo equip = new Cromatografo();
//            equip.setSystem_name(sys_name);
//            system.setCromatografo(equip);
//            systemDAO.selectUltimoSystemSuitabilityBySystem(system);
//            if ((Boolean) tblHistoricoSystem.getValueAt(0, 4)) {
//                if (system.getData_fim() == null) {
//                    lblSystem.setIcon(icone_ok);
//                    lblSystem.setToolTipText("System Suitability OK");
//                    repaint();
//                } else {
//                    lblSystem.setIcon(icone_erro);
//                    lblSystem.setToolTipText("System Suitability inválido");
//                    repaint();
//                }
//            } else {
//                lblSystem.setIcon(icone_erro);
//                lblSystem.setToolTipText("System Suitability inválido");
//                repaint();
//            }
//        } else {
//            lblSystem.setIcon(icone_erro);
//            lblSystem.setToolTipText("System Suitability inválido");
//            repaint();
//        }
//
//        if (tblStart.getRowCount() > 0) {
//            if (!DataHora.getTimestampDate(tblStart.getValueAt(0, 2).toString()).after(cal.getTime())) {
//                lblStart.setIcon(icone_ok);
//                lblStart.setToolTipText("Start OK");
//                repaint();
//            } else {
//                lblStart.setIcon(icone_erro);
//                lblStart.setToolTipText("Start inválido");
//                JOptionPane.showMessageDialog(null, "Validade do Start está vencida", "Start",
//                        JOptionPane.ERROR_MESSAGE);
//                repaint();
//            }
//        } else {
//            lblStart.setIcon(icone_erro);
//            lblStart.setToolTipText("Start inválido");
//            JOptionPane.showMessageDialog(null, "Validade do Start está vencida", "Start",
//                    JOptionPane.ERROR_MESSAGE);
//            repaint();
//        }
//
    }

    private void verificarAtualizacao() {
//        ScheduledExecutorService scheduleService = Executors.newSingleThreadScheduledExecutor();
//        ImageIcon icone_alerta = new ImageIcon(getClass().getResource("/img/icon_erro_alerta.png"));
//
//        scheduleService.scheduleAtFixedRate(new Runnable() {
//            @Override
//            public void run() {
//                CromatografoDAO equipDAO = new CromatografoDAO();
//                DateTime data_atual = new DateTime();
//                DateTime data_ultimo_registro = new DateTime(equipDAO.selectDataUltimoRegistroCromatografo(sys_name));
//                int minutos = Minutes.minutesBetween(data_ultimo_registro, data_atual).getMinutes();
//                if (minutos > 480 && minutos < 1080) {
//                    JOptionPane.showMessageDialog(null,
//                            "Equipamento " + sys_name + " sem atualização a mais de "
//                            + minutos + " min!\nPor favor atualize agora!", "Atualização",
//                            JOptionPane.WARNING_MESSAGE);
//                }
//                AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
//                if (atvprepDAO.selectUltimoRegistroSolucaoReagente(sys_name)) {
//                    lblAlertaSolucaoReagente.setIcon(icone_alerta);
//                    lblAlertaSolucaoReagente.setText("Solução Reagente");
//                    lblAlertaSolucaoReagente.setToolTipText("Existe uma nova Solução Reagente");
//                    piscar();
//                } else {
//                    lblAlertaSolucaoReagente.setIcon(null);
//                    lblAlertaSolucaoReagente.setText(null);
//                    lblAlertaSolucaoReagente.setToolTipText(null);
//                }
//            }
//        }, 0, 5, TimeUnit.MINUTES);
    }

    private void piscar() {
//        ScheduledExecutorService scheduleService = Executors.newSingleThreadScheduledExecutor();
//        scheduleService.scheduleAtFixedRate(new Runnable() {
//            @Override
//            public void run() {
//                if (lblAlertaSolucaoReagente.isVisible()) {
//                    lblAlertaSolucaoReagente.setVisible(false);
//                } else {
//                    lblAlertaSolucaoReagente.setVisible(true);
//                }
//            }
//        }, 0, 1, TimeUnit.SECONDS);
    }

}
