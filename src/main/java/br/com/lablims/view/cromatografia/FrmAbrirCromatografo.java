package br.com.lablims.view.cromatografia;

import br.com.lablims.dao.EquipamentoDAO;
import br.com.lablims.dao.SetorDAO;
import br.com.lablims.model.Equipamento;
import br.com.lablims.model.Setor;
import br.com.lablims.util.ComboBox;
import br.com.lablims.util.Frames;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author rafael.lopes
 */
public class FrmAbrirCromatografo extends javax.swing.JDialog {

    FrmLogCromatografos frm;
    private final TreeMap<Long, String> categoryMapSetor = new TreeMap<>();

    /**
     * Creates new form FrmEquipamento
     *
     * @param parent
     * @param modal
     * @param form
     */
    public FrmAbrirCromatografo(java.awt.Frame parent, boolean modal, FrmLogCromatografos form) {
        super(parent, modal);
        frm = form;
        initComponents();
        Frames.setUpFrame(this, "Selecionar Sistema Cromatográfico", false);
        readSetor();
        readEquipamento();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstEquipamentos = new javax.swing.JList();
        btnAbrir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        cmbSetor = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lstEquipamentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstEquipamentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstEquipamentosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstEquipamentos);

        btnAbrir.setText("OK");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel28.setText("Setor:");

        cmbSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSetorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSetor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(cmbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAbrir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String title = lstEquipamentos.getSelectedValue().toString();
        try {
            frm.criarJanela(title);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir" + e);
        }
        dispose();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void lstEquipamentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstEquipamentosMouseClicked
        if (evt.getClickCount() == 2) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            String title = lstEquipamentos.getSelectedValue().toString();
            try {
                frm.criarJanela(title);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao abrir" + e);
            }
            dispose();
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_lstEquipamentosMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSetorActionPerformed
        readEquipamento();
    }//GEN-LAST:event_cmbSetorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAbrirCromatografo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FrmAbrirCromatografo dialog = new FrmAbrirCromatografo(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox cmbSetor;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstEquipamentos;
    // End of variables declaration//GEN-END:variables

    public final void readEquipamento() {
        try {
            DefaultListModel model = new DefaultListModel();
            EquipamentoDAO equipDAO = new EquipamentoDAO();
            List<Equipamento> equips = new ArrayList<>();
            if (cmbSetor.getSelectedItem().toString().equals("Todos")) {
                equips = equipDAO.findTagByTipo("Cromatógrafo");
            } else {
                equips = equipDAO.findTagByTipoSetor("Cromatógrafo",
                        ComboBox.getKeyForValue(cmbSetor.getSelectedItem().toString(), categoryMapSetor));
            }
            for (Equipamento equip : equips) {
                model.addElement(equip.getTag());
            }
            lstEquipamentos.setModel(model);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar lista de Equipamentos: " + ex);
        }
    }

    private void readSetor() {
        cmbSetor.removeAllItems();
        cmbSetor.addItem("Todos");
        categoryMapSetor.clear();
        SetorDAO setorDAO = new SetorDAO();
        try {
            for (Setor setor : setorDAO.findEntities(Setor.class)) {
                Long id = setor.getId();
                String name = setor.getSiglaSetor();
                cmbSetor.addItem(name);
                categoryMapSetor.put(id, name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

}
