/*
 * Copyright (C) 2017 rafael.lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.cromatografia;

//import Classes.DAO.AtividadePreparoDAO;
//import Classes.Modelo.Analise;
//import Classes.Modelo.AtividadePreparo;
//import Classes.Modelo.Cromatografo;
//import Classes.Modelo.Metodologia;
//import Classes.Modelo.Usuario;
//import Classes.Util.DataHora;
//import Frm.Login.FrmSalvar;
//import Frm.Recepcao.FrmProcurarLote;
//import Classes.Modelo.Lote;
import java.awt.Cursor;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author rafael.lopes
 */
public class FrmAtividadeEquipamento extends javax.swing.JDialog {

    private int analise_id;
    private boolean editar;

    /**
     * Creates new form FrmNovoRegistroCromatografo
     *
     * @param parent
     * @param modal
     */
    public FrmAtividadeEquipamento(java.awt.Frame parent, boolean modal, int id) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Atividade Equipamento");
        analise_id = id;
        loadHora();
        carregarDados(id);
        readAtividades();
    }

    public FrmAtividadeEquipamento(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Atividade Equipamento");
        loadHora();
        loadData();
        readAtividades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDados = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        ckbRetrabalho = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        cmbAtividade = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescricao = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        txtLote = new javax.swing.JTextField();
        btnProcurarLoteAmostra = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        cmbMetodo = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        cmbEquipamento = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbAnalise = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        txtHoraInicio = new javax.swing.JSpinner();
        txtMinutoInicio = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDataInicio = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        txtHoraFim = new javax.swing.JSpinner();
        txtMinutoFim = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDataFim = new com.toedter.calendar.JDateChooser();
        ckbFinalizar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pnlDados.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados"));

        jLabel10.setText("Descrição:");

        ckbRetrabalho.setText("Retrabalho");

        jLabel24.setText("Atividade:");

        txtDescricao.setColumns(20);
        txtDescricao.setRows(5);
        jScrollPane1.setViewportView(txtDescricao);

        jLabel9.setText("Lote Amostra:");

        txtLote.setEditable(false);
        txtLote.setBackground(new java.awt.Color(204, 204, 204));

        btnProcurarLoteAmostra.setText("Buscar");
        btnProcurarLoteAmostra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarLoteAmostraActionPerformed(evt);
            }
        });

        jLabel25.setText("Método:");

        jLabel26.setText("Equipamento:");

        jLabel8.setText("Análise:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                .addGap(5, 5, 5)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(ckbRetrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                            .addComponent(cmbAtividade, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txtLote)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnProcurarLoteAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAnalise, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEquipamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbMetodo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(cmbAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurarLoteAmostra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(cmbMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(cmbEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAnalise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckbRetrabalho)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Data / Hora do Início"));

        jLabel1.setText("h");

        jLabel2.setText("min");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtDataInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMinutoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMinutoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Data / Hora do Final"));

        jLabel3.setText("h");

        jLabel4.setText("min");

        ckbFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbFinalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ckbFinalizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtDataFim, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMinutoFim, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMinutoFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addComponent(txtHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlDadosLayout = new javax.swing.GroupLayout(pnlDados);
        pnlDados.setLayout(pnlDadosLayout);
        pnlDadosLayout.setHorizontalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDadosLayout.createSequentialGroup()
                        .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlDadosLayout.setVerticalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechar)
                    .addComponent(btnSalvar))
                .addContainerGap())
        );

        getContentPane().add(pnlDados);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
//        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
//                + " " + txtHoraInicio.getValue().toString()
//                + ":" + txtMinutoInicio.getValue().toString() + ":00");
//        Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
//                + " " + txtHoraFim.getValue().toString()
//                + ":" + txtMinutoFim.getValue().toString() + ":00");
//        if (analise_id > 0) {
//            //ja existe
//            if (editar) {
//                //editar
//                try {
//                    if (cmbAtividade.getSelectedItem().toString().isEmpty()) {
//                        JOptionPane.showMessageDialog(null, "Selecione a Atividade!");
//                        cmbAtividade.requestFocus();
//                    } else if (txtDescricao.getText().isEmpty()) {
//                        JOptionPane.showMessageDialog(null, "Descreva a Atividade!");
//                        txtDescricao.requestFocus();
//                    } else if (txtDataInicio.getDate() == null) {
//                        JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
//                        txtDataInicio.requestFocus();
//                    } else if (txtDataFim.getDate() == null) {
//                        JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
//                        txtDataFim.requestFocus();
//                    } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
//                        JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
//                        txtDataFim.requestFocus();
//                    } else {
//                        //Abre Dialog para savar
//                        FrmSalvar frmSalvar = new FrmSalvar(null, true);
//                        frmSalvar.setVisible(true);
//                        if (FrmSalvar.senha()) {
//                            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                            updateDados();
//                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//                            dispose();
//                        }
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
//                }
//            } else {
//                //nao editar
//                try {
//                    if (txtDataInicio.getDate() == null) {
//                        JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
//                        txtDataInicio.requestFocus();
//                    } else if (txtDataFim.getDate() == null) {
//                        JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
//                        txtDataFim.requestFocus();
//                    } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
//                        JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
//                        txtDataFim.requestFocus();
//                    } else {
//                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                        updateDados();
//                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//                        dispose();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
//                }
//            }
//        } else {
//            //novo
//            try {
//                if (cmbAtividade.getSelectedItem().toString().isEmpty()) {
//                    JOptionPane.showMessageDialog(null, "Selecione a Atividade!");
//                    cmbAtividade.requestFocus();
//                } else if (txtDescricao.getText().isEmpty()) {
//                    JOptionPane.showMessageDialog(null, "Descreva a Atividade!");
//                    txtDescricao.requestFocus();
//                } else if (txtDataInicio.getDate() == null) {
//                    JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
//                    txtDataInicio.requestFocus();
//                } else if (txtDataFim.getDate() == null && ckbFinalizar.isSelected()) {
//                    JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
//                    txtDataFim.requestFocus();
//                } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
//                    JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
//                    txtDataFim.requestFocus();
//                } else {
//                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                    criarAtividade();
//                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//                    dispose();
//                }
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
//            }
//        }
//        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void ckbFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbFinalizarActionPerformed
        if (ckbFinalizar.isSelected()) {
            txtDataFim.setEnabled(true);
            txtHoraFim.setEnabled(true);
            txtMinutoFim.setEnabled(true);
        } else {
            txtDataFim.setEnabled(false);
            txtHoraFim.setEnabled(false);
            txtMinutoFim.setEnabled(false);
        }
    }//GEN-LAST:event_ckbFinalizarActionPerformed

    private void btnProcurarLoteAmostraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarLoteAmostraActionPerformed
//        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        List<Lote> prds = new ArrayList<>();
//        FrmProcurarLote frm = new FrmProcurarLote(null, true, prds);
//        frm.setVisible(true);
//        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//        int i = 0;
//        for (Lote lot : prds) {
//            if (i == 0) {
//                txtLote.setText(lot.getLote_produto());
//            }
//            i++;
//        }
    }//GEN-LAST:event_btnProcurarLoteAmostraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAtividadeEquipamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAtividadeEquipamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAtividadeEquipamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAtividadeEquipamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmAtividadeEquipamento dialog = new FrmAtividadeEquipamento(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnFechar;
    private javax.swing.JButton btnProcurarLoteAmostra;
    public static javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox ckbFinalizar;
    private javax.swing.JCheckBox ckbRetrabalho;
    private javax.swing.JComboBox cmbAnalise;
    private javax.swing.JComboBox cmbAtividade;
    private javax.swing.JComboBox cmbEquipamento;
    private javax.swing.JComboBox cmbMetodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlDados;
    private com.toedter.calendar.JDateChooser txtDataFim;
    private com.toedter.calendar.JDateChooser txtDataInicio;
    private javax.swing.JTextArea txtDescricao;
    private javax.swing.JSpinner txtHoraFim;
    private javax.swing.JSpinner txtHoraInicio;
    private javax.swing.JTextField txtLote;
    private javax.swing.JSpinner txtMinutoFim;
    private javax.swing.JSpinner txtMinutoInicio;
    // End of variables declaration//GEN-END:variables

    private void loadHora() {
        SpinnerNumberModel modelHoraInicio = new SpinnerNumberModel(0, 0, 23, 1);
        txtHoraInicio.setModel(modelHoraInicio);
        JSpinner.NumberEditor editorHoraInicio = new JSpinner.NumberEditor(txtHoraInicio);
        txtHoraInicio.setEditor(editorHoraInicio);
        SpinnerNumberModel modelMinutoInicio = new SpinnerNumberModel(0, 0, 59, 1);
        txtMinutoInicio.setModel(modelMinutoInicio);
        JSpinner.NumberEditor editorMinutoInicio = new JSpinner.NumberEditor(txtMinutoInicio);
        txtMinutoInicio.setEditor(editorMinutoInicio);
        SpinnerNumberModel modelHoraFim = new SpinnerNumberModel(0, 0, 23, 1);
        txtHoraFim.setModel(modelHoraFim);
        JSpinner.NumberEditor editorHoraFim = new JSpinner.NumberEditor(txtHoraFim);
        txtHoraFim.setEditor(editorHoraFim);
        SpinnerNumberModel modelMinutoFim = new SpinnerNumberModel(0, 0, 59, 1);
        txtMinutoFim.setModel(modelMinutoFim);
        JSpinner.NumberEditor editorMinutoFim = new JSpinner.NumberEditor(txtMinutoFim);
        txtMinutoFim.setEditor(editorMinutoFim);
    }

    private void loadData() {
        Date currentDate = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(currentDate);
        txtDataInicio.setDate(currentDate);
        txtDataInicio.setMaxSelectableDate(currentDate);
        txtHoraInicio.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
        txtMinutoInicio.setValue((Integer) cal.get(Calendar.MINUTE));
        txtDataFim.setDate(currentDate);
        txtDataFim.setMaxSelectableDate(currentDate);
        txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
        txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE) + 5);
        cal.add(Calendar.DATE, -5);
        txtDataFim.setMinSelectableDate(cal.getTime());
        txtDataInicio.setMinSelectableDate(cal.getTime());
        txtDataFim.setEnabled(false);
        txtHoraFim.setEnabled(false);
        txtMinutoFim.setEnabled(false);
    }

    private void updateDados() {
//        try {
//            AtividadePreparo atvprep = new AtividadePreparo();
//            AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
//            Usuario user_regeistro = new Usuario();
//            Usuario user_inicio = new Usuario();
//            Usuario user_fim = new Usuario();
//            Cromatografo equip = new Cromatografo();
//            Metodologia mtd = new Metodologia();
//            atvprep.setAtividade_preparo_id(analise_id);
//            atvprep.setCromatografo(equip);
//            atvprep.setRetrabalho_preparo(ckbRetrabalho.isSelected());
//            atvprep.setLote_preparo(null);
//            //atvprep.setObs_preparo(txtObs.getText());
//            atvprep.setTipo_preparo(null);
//            atvprep.setDescricao_preparo(txtDescricao.getText().trim().toUpperCase());
//            atvprep.setQtd_preparo(1.0);
//            atvprep.setMetodologia(mtd);
//            Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
//                    + " " + txtHoraInicio.getValue().toString()
//                    + ":" + txtMinutoInicio.getValue().toString() + ":00");
//            Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
//                    + " " + txtHoraFim.getValue().toString()
//                    + ":" + txtMinutoFim.getValue().toString() + ":00");
//            atvprep.setData_hora_inicio(datahora_inicio);
//            user_inicio.setUser(System.getProperty("user"));
//            atvprep.setUser_inicio(user_inicio);
//
//            if (!ckbFinalizar.isSelected() && ckbFinalizar.isVisible()) {
//                atvprep.setData_hora_fim(null);
//                atvprep.setUser_fim(new Usuario());
//            } else {
//                atvprep.setData_hora_fim(datahora_fim);
//                user_fim.setUser(System.getProperty("user"));
//                atvprep.setUser_fim(user_fim);
//            }
//
//            atvprep.setData_hora_registro(DataHora.getTimestampDate(new Date()));
//            user_regeistro.setUser(System.getProperty("user"));
//            atvprep.setUser_registro(user_regeistro);
//            atvprepDAO.updateAtividade(atvprep);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
//        }
    }

    private void criarAtividade() {
//        try {
//            AtividadePreparo atvprep = new AtividadePreparo();
//            AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
//            Usuario user_regeistro = new Usuario();
//            Usuario user_inicio = new Usuario();
//            Usuario user_fim = new Usuario();
//            Metodologia mtd = new Metodologia();
//            Cromatografo equip = new Cromatografo();
//            Analise anls = new Analise();
//            atvprep.setCategoria_preparo("Atividade Geral");
//            atvprep.setTipo_preparo(null);
//            atvprep.setDescricao_preparo(txtDescricao.getText().trim().toUpperCase());
//            atvprep.setLote_preparo(null);
//            atvprep.setQtd_preparo(1.0);
//            atvprep.setMetodologia(mtd);
//            atvprep.setCromatografo(equip);
//            atvprep.setRetrabalho_preparo(ckbRetrabalho.isSelected());
//            anls.setAnalise_id(0);
//            atvprep.setAnalise(anls);
//            //atvprep.setObs_preparo(txtObs.getText());
//            Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
//                    + " " + txtHoraInicio.getValue().toString()
//                    + ":" + txtMinutoInicio.getValue().toString() + ":00");
//            Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
//                    + " " + txtHoraFim.getValue().toString()
//                    + ":" + txtMinutoFim.getValue().toString() + ":00");
//            atvprep.setData_hora_inicio(datahora_inicio);
//            user_inicio.setUser(System.getProperty("user"));
//            atvprep.setUser_inicio(user_inicio);
//            if (ckbFinalizar.isSelected()) {
//                atvprep.setData_hora_fim(datahora_fim);
//                user_fim.setUser(System.getProperty("user"));
//                atvprep.setUser_fim(user_fim);
//            } else {
//                atvprep.setData_hora_fim(null);
//                atvprep.setUser_fim(new Usuario());
//            }
//            atvprep.setData_hora_registro(DataHora.getTimestampDate(new Date()));
//            user_regeistro.setUser(System.getProperty("user"));
//            atvprep.setUser_registro(user_regeistro);
//            atvprepDAO.createAtividade(atvprep);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
//        }
    }

    private void carregarDados(int id) {
//        AtividadePreparo atvprep = new AtividadePreparo();
//        AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
//        Analise anls = new Analise();
//        atvprep.setAtividade_preparo_id(id);
//        atvprepDAO.selectAtividade(atvprep);
//        String[] cod_mtd = {atvprep.getMetodologia().getCod_metodo()};
//        cmbAtividade.setSelectedItem(cod_mtd[0]);
//        ckbRetrabalho.setSelected((Boolean) atvprep.getRetrabalho_preparo());
//        txtDescricao.setText(atvprep.getDescricao_preparo());
//        txtObs.setText(atvprep.getObs_preparo());
//
//        if (editar) {
//            ckbFinalizar.setVisible(true);
//            ckbFinalizar.setSelected(true);
//            cmbAtividade.setEnabled(true);
//            ckbRetrabalho.setEnabled(true);
//            txtDataFim.setEnabled(true);
//            txtHoraFim.setEnabled(true);
//            txtMinutoFim.setEnabled(true);
//            txtDescricao.setEnabled(true);
//        } else {
//            cmbAtividade.setEnabled(false);
//            txtHoraInicio.setEnabled(false);
//            txtMinutoInicio.setEnabled(false);
//            txtDataInicio.setEnabled(false);
//            ckbFinalizar.setVisible(false);
//            ckbRetrabalho.setEnabled(false);
//            txtDescricao.setEnabled(false);
//        }
//
//        try {
//            Date currentDate = new Date();
//            Calendar cal = Calendar.getInstance();
//            Date data_inicio = DataHora.getTimestampDate(atvprep.getData_hora_inicio());
//            cal.setTime(data_inicio);
//            txtDataInicio.setDate(data_inicio);
//            txtDataInicio.setMinSelectableDate(data_inicio);
//            txtHoraInicio.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
//            txtMinutoInicio.setValue((Integer) cal.get(Calendar.MINUTE));
//            txtDataInicio.setMaxSelectableDate(currentDate);
//            if (editar) {
//                Date data_fim = DataHora.getTimestampDate(atvprep.getData_hora_fim() == null ? new Date() : atvprep.getData_hora_fim());
//                cal.setTime(data_fim);
//                txtDataFim.setDate(data_fim);
//                txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
//                txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
//                cal.add(Calendar.DATE, -5);
//                txtDataFim.setMinSelectableDate(cal.getTime());
//                txtDataFim.setMaxSelectableDate(currentDate);
//            } else {
//                cal.setTime(currentDate);
//                txtDataFim.setDate(currentDate);
//                txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
//                txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
//                cal.add(Calendar.DATE, -5);
//                txtDataFim.setMinSelectableDate(cal.getTime());
//                txtDataFim.setMaxSelectableDate(currentDate);
//            }
//        } catch (Exception e) {
//            Calendar cal = Calendar.getInstance();
//            cal.setTime(new Date());
//            txtDataFim.setDate(new Date());
//            txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
//            txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
//            cal.add(Calendar.DATE, -5);
//            txtDataFim.setMinSelectableDate(cal.getTime());
//            txtDataFim.setMaxSelectableDate(new Date());
//        }

    }

    public final void readAtividades() {
        cmbAtividade.removeAllItems();
        cmbAtividade.addItem("");
        cmbAtividade.addItem("Ajuste");
        cmbAtividade.addItem("Sequenciamento");
        cmbAtividade.addItem("Processamento");
        cmbAtividade.addItem("Cálculo");
        cmbAtividade.addItem("Resultado");
        cmbAtividade.addItem("Impressão");
        cmbAtividade.addItem("Documentação");
        cmbAtividade.addItem("Conferência");
        cmbAtividade.addItem("Teste");
        cmbAtividade.addItem("Outro");
    }

}
