/*
 * Copyright (C) 2019 rafael.lopes
 *
 * Este programa é um software livre: você pode redistribuí-lo e / ou modificar
 * sob os termos da GNU General Public License, conforme publicado pela
 * a Free Software Foundation, seja a versão 3 da Licença, quanto
 * qualquer versão posterior.
 *
 * Este programa é distribuído na esperança de que seja útil,
 * mas SEM QUALQUER GARANTIA; sem a garantia implícita de
 * COMERCIALIZAÇÃO OU APTIDÃO PARA UM PROPÓSITO PARTICULAR. Veja o
 * GNU General Public License para obter mais detalhes.
 *
 * Você deve ter recebido uma cópia da GNU General Public License
 *  juntamente com este programa. Caso contrário, veja <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.principal;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;
import javax.persistence.NoResultException;
import javax.persistence.TransactionRequiredException;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import br.com.lablims.connection.ConnectionFactory;
import br.com.lablims.dao.RegraAcessoDAO;
import br.com.lablims.dao.SegurancaDAO;
import br.com.lablims.dao.SistemaDAO;
import br.com.lablims.dao.UsuarioDAO;
import br.com.lablims.model.Seguranca;
import br.com.lablims.model.Usuario;
import br.com.lablims.util.Cript;
import br.com.lablims.view.config.FrmSenhaAlterar;

/**
 * O <code>FrmLogin</code> Carrega de Login do sistema
 *
 * @author rafae.lopes
 * @version 1.00
 */
public class FrmLogin extends javax.swing.JFrame implements Runnable {

    /**
     * Método para criar o Form FrmLogin()
     */
    public FrmLogin() {
        initComponents();
        setResizable(false);
        setBackground(new Color(0, 0, 0, 0));
        setLocationRelativeTo(null);
        ImageIcon icone = new ImageIcon(getClass().getResource("/Imagem/icon_sgcq_48.png"));
        setIconImage(icone.getImage());
        setTitle("Lab LIMS - Login");
        bancoDados();
    }

    /**
     * Método para criar o Form FrmLogin()
     *
     * @param frm JFrame - Pega a instancia do Form de Splash.
     */
    public FrmLogin(JFrame frm) {
        initComponents();
        setResizable(false);
        setBackground(new Color(0, 0, 0, 0));
        setLocationRelativeTo(null);
        ImageIcon icone = new ImageIcon(getClass().getResource("/Imagem/icon_sgcq_48.png"));
        setIconImage(icone.getImage());
        setTitle("Lab LIMS - Login");
        bancoDados();
        frm.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnEntrar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        txtUsuario = new javax.swing.JTextField();
        txtSenha = new javax.swing.JPasswordField();
        lblLogo = new javax.swing.JLabel();
        lblVersao = new javax.swing.JLabel();
        lblCapslock = new javax.swing.JLabel();
        lblBancoDados = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSair = new javax.swing.JButton();
        lblDashboard = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(1000, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setForeground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Usuário");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Senha");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        btnEntrar.setBackground(new java.awt.Color(0, 153, 153));
        btnEntrar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnEntrar.setForeground(new java.awt.Color(255, 255, 255));
        btnEntrar.setText("Entrar");
        btnEntrar.setBorder(null);
        btnEntrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEntrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 420, 60));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, 360, 10));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 360, 10));

        txtUsuario.setBackground(new java.awt.Color(102, 102, 102));
        txtUsuario.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtUsuario.setForeground(new java.awt.Color(255, 255, 255));
        txtUsuario.setBorder(null);
        txtUsuario.setName(""); // NOI18N
        txtUsuario.setOpaque(false);
        txtUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyReleased(evt);
            }
        });
        jPanel1.add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 350, 35));

        txtSenha.setBackground(new java.awt.Color(102, 102, 102));
        txtSenha.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSenha.setForeground(new java.awt.Color(255, 255, 255));
        txtSenha.setBorder(null);
        txtSenha.setOpaque(false);
        txtSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSenhaFocusGained(evt);
            }
        });
        txtSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSenhaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSenhaKeyReleased(evt);
            }
        });
        jPanel1.add(txtSenha, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 350, 35));

        lblLogo.setBackground(new java.awt.Color(255, 255, 255));
        lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_logo_lab_lims.png"))); // NOI18N
        lblLogo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblLogo.setOpaque(true);
        jPanel1.add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 90));

        lblVersao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblVersao.setForeground(new java.awt.Color(255, 255, 255));
        lblVersao.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblVersao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_update.png"))); // NOI18N
        jPanel1.add(lblVersao, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, -1, -1));

        lblCapslock.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCapslock.setForeground(new java.awt.Color(255, 204, 0));
        jPanel1.add(lblCapslock, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 330, 360, -1));

        lblBancoDados.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(lblBancoDados, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 470, 30, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_password.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_user_48.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 500, 510));

        btnSair.setBackground(new java.awt.Color(123, 123, 123));
        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_close_window.png"))); // NOI18N
        btnSair.setBorder(null);
        btnSair.setContentAreaFilled(false);
        btnSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSair.setFocusable(false);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        getContentPane().add(btnSair, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 0, 40, 40));

        lblDashboard.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        lblDashboard.setForeground(new java.awt.Color(255, 255, 255));
        lblDashboard.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDashboard.setText("Login");
        getContentPane().add(lblDashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 130, 80));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/Background2.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 600));

        setSize(new java.awt.Dimension(500, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void txtSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSenhaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            bloquearCamposLogin();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            acessarSistema();
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_txtSenhaKeyPressed

    private void txtUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtSenha.requestFocus();
        }
    }//GEN-LAST:event_txtUsuarioKeyReleased

    private void btnEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntrarActionPerformed
        bloquearCamposLogin();
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        acessarSistema();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnEntrarActionPerformed

    private void txtSenhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSenhaKeyReleased
        capslock();
    }//GEN-LAST:event_txtSenhaKeyReleased

    private void txtSenhaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSenhaFocusGained
        capslock();
    }//GEN-LAST:event_txtSenhaFocusGained

    /**
     * Método para criar o Form FrmLogin()
     */
    @Override
    public void run() {
        synchronized (this) {
            /* Create and display the dialog */
            new FrmLogin(null).setVisible(true);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEntrar;
    private javax.swing.JButton btnSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblBancoDados;
    private javax.swing.JLabel lblCapslock;
    private javax.swing.JLabel lblDashboard;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblVersao;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para construir um Alerta (<code>JOptionPane</code>) contendo o
     * erro gerado pelo Login.
     *
     * @param texto String - O conteudo a ser inserido na mensagem de erro.
     */
    private void userSenhaInvalidos(String texto) {
        JOptionPane op = new JOptionPane(texto, JOptionPane.INFORMATION_MESSAGE);
        JDialog dialog = op.createDialog("Erro de Login");
        dialog.setAlwaysOnTop(true);
        dialog.setModal(false);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setVisible(true);
    }

    /**
     * Método para validar e acessar o sistema.
     */
    private void acessarSistema() {
        EntityManager em = ConnectionFactory.em(true);
        Usuario user = new Usuario();
        UsuarioDAO userDAO = new UsuarioDAO();
        RegraAcessoDAO regraAcessoDAO = new RegraAcessoDAO();
        SegurancaDAO segurancaDAO = new SegurancaDAO();
        if ("".equals(txtUsuario.getText().toLowerCase()) || "".equals(txtSenha.getText())) {
            userSenhaInvalidos("Usuário ou Senha inválidos");
            limparCamposLogin();
            desbloquearCamposLogin();
        } else {
            try {
                user.setUsuario(txtUsuario.getText().toLowerCase());
                user = userDAO.buscaUsuarioByName(em, user);
                Integer falhas = user.getFailed_access_count() == null ? 0 : user.getFailed_access_count();
                if (user.getPass().equals(Cript.SHA(txtSenha.getText()))) {
                    if (!(user.getLock() == null ? false : user.getLock())) {
                        if (!user.getChange_pass()) {
                            System.setProperty("user_id", user.getId().toString());
                            System.setProperty("user", user.getUsuario());
                            System.setProperty("acesso", regraAcessoDAO.stringAcesso(em, user.getGrupo().getId()));
                            if (falhas > 0) {
                                userSenhaInvalidos("Número de falhas na tentativas de Login: " + falhas);
                                userDAO.salvarFalhaLogin(em, user, false);
                            }
                            userDAO.atualizarLoginUsuario(em, user);
                            userDAO.findById(em, Usuario.class, user.getId());
                            desbloquearCamposLogin();
                            showPrincipalScreen();
                            desbloquearCamposLogin();
                            this.dispose();
                        } else {
                            showAlterarSenha(user.getId());
                            limparCamposLogin();
                            desbloquearCamposLogin();
                        }
                    } else {
                        userSenhaInvalidos("Usuário Bloqueado");
                        limparCamposLogin();
                        desbloquearCamposLogin();
                    }
                } else {
                    Integer falha;
                    try {
                        falha = segurancaDAO.findById(em, Seguranca.class, 1).getNumero();
                    } catch (Exception e) {
                        falha = 10;
                    }
                    if (falhas > (falha == null ? 10 : falha)) {
                        userDAO.salvarBloqueioUsuario(em, user);
                        userSenhaInvalidos("Usuário Bloqueado");
                    } else {
                        userSenhaInvalidos("Senha inválida");
                        userDAO.salvarFalhaLogin(em, user, true);
                    }
                    limparCamposLogin();
                    desbloquearCamposLogin();
                }
            } catch (EntityNotFoundException | NoResultException | TransactionRequiredException e) {
                userSenhaInvalidos("Usuário não Encontrado");
                limparCamposLogin();
                desbloquearCamposLogin();
            } catch (Exception ex) {
                userSenhaInvalidos("Erro ao Abrir" + ex.toString());
                limparCamposLogin();
                desbloquearCamposLogin();
            } finally {
                em.close();
            }

        }
    }

    /**
     * Método para exibir a pagina principal apos validar o Login.
     */
    private void showPrincipalScreen() {
        try {
            FrmPrincipal frm = new FrmPrincipal();
            frm.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro : " + ex);
        }
    }

    /**
     * Método para chamar o Form de modificacao de Senha.
     */
    private void showAlterarSenha(Integer id) {
        try {
            Usuario user = new Usuario();
            user.setId(id);
            new FrmSenhaAlterar(this, false, user).setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            desbloquearCamposLogin();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao Abrir");
        }
    }

    /**
     * Método para chamar o Form de modificacao de Senha.
     */
    private void limparCamposLogin() {
        txtUsuario.setText("");
        txtSenha.setText("");
    }

    /**
     * Método para chamar o Form de modificacao de Senha.
     */
    private void bloquearCamposLogin() {
        txtUsuario.setEnabled(false);
        txtSenha.setEnabled(false);
        btnEntrar.setEnabled(false);
        btnSair.setEnabled(false);
    }

    /**
     * Método para chamar o Form de modificacao de Senha.
     */
    private void desbloquearCamposLogin() {
        txtUsuario.setEnabled(true);
        txtSenha.setEnabled(true);
        btnEntrar.setEnabled(true);
        btnSair.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    /**
     * Método para verificar se o capslock esta ativo.
     */
    private void capslock() {
        try {
            ImageIcon icone = new ImageIcon(getClass().getResource("/Imagem/icon_alerta.png"));
            boolean capsLigado = Toolkit.getDefaultToolkit().getLockingKeyState(
                    KeyEvent.VK_CAPS_LOCK);
            if (capsLigado) {
                lblCapslock.setText("Caps Lock Ligado!");
                lblCapslock.setIcon(icone);
                repaint();
            } else {
                lblCapslock.setText(null);
                lblCapslock.setIcon(null);
                repaint();
            }
        } catch (Exception ex) {
        }
    }

    /**
     * Método para verificar a conexao com o banco de dados.
     */
    private void bancoDados() {
        EntityManager em = ConnectionFactory.em(true);
        try {
            ImageIcon icone_conect = new ImageIcon(getClass().getResource("/Imagem/icon_database_accept.png"));
            ImageIcon icone_erro = new ImageIcon(getClass().getResource("/Imagem/icon_database_error.png"));
            if (SistemaDAO.isBancoDadosConectado(em)) {
                lblBancoDados.setIcon(icone_conect);
                lblBancoDados.setToolTipText("Banco de Dados: Conectado");
                repaint();
            } else {
                lblBancoDados.setIcon(icone_erro);
                lblBancoDados.setToolTipText("Banco de Dados: Desconectado");
                repaint();
            }
        }finally{
            em.close();
        }

    }

}
