/*
 * Copyright (C) 2019 rafael.lopes
 *
 * Este programa é um software livre: você pode redistribuí-lo e / ou modificar
 * sob os termos da GNU General Public License, conforme publicado pela
 * a Free Software Foundation, seja a versão 3 da Licença, quanto
 * qualquer versão posterior.
 *
 * Este programa é distribuído na esperança de que seja útil,
 * mas SEM QUALQUER GARANTIA; sem a garantia implícita de
 * COMERCIALIZAÇÃO OU APTIDÃO PARA UM PROPÓSITO PARTICULAR. Veja o
 * GNU General Public License para obter mais detalhes.
 *
 * Você deve ter recebido uma cópia da GNU General Public License
 *  juntamente com este programa. Caso contrário, veja <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.mp;

import br.com.lablims.dao.LoteMateriaPrimaDAO;
import br.com.lablims.model.LoteMateriaPrima;
import br.com.lablims.util.AcessoSistema;
import br.com.lablims.util.DataHora;
import br.com.lablims.util.Frames;
import br.com.lablims.util.TableSorter;
import br.com.lablims.view.principal.FrmCarregando;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rafael.lopes
 */
public class FrmProgramacaoMateriaPrima extends javax.swing.JFrame {

    private String ACESSO = new AcessoSistema().getAcessoSistema(this);
    Long planoAnlaise_id;
    Long status_id;

    /**
     * Creates new form FrmProgramacaoMateriaPrima
     */
    public FrmProgramacaoMateriaPrima() {
        initComponents();
        Frames.setUpFrame(this, "Programação Matéria-Prima", false);
        readLoteStatus();
        btnEditar.setEnabled(AcessoSistema.editarDados(ACESSO));
    }

    public FrmProgramacaoMateriaPrima(Long pa_id) {
        initComponents();
        Frames.setUpFrame(this, "Programação Matéria-Prima", false);
        planoAnlaise_id = pa_id;
        readLoteStatus();
        btnEditar.setEnabled(AcessoSistema.editarDados(ACESSO));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlMetodologia = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoteMateriaPrima = new javax.swing.JTable();
        txtPesquisarMetodologia = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnEditar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnAtualizar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnAtualizar1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cmbLimitPorPagina = new javax.swing.JComboBox<String>();
        jLabel13 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<String>();
        pnlAuditTrail = new javax.swing.JPanel();
        pnlAuditoriaGrupos = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAuditoria = new javax.swing.JTable();
        txtPesquisarAuditoria = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmbLimitPorPaginaAuditoria = new javax.swing.JComboBox<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Lotes"));

        tblLoteMateriaPrima.setAutoCreateRowSorter(true);
        tblLoteMateriaPrima.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S", "M", "Lote_Id", "Lote", "Data Necessidade", "Data Previsão SAP", "Data Previsão Lab", "Código", "Material", "Analises", "Status SAP", "Observações", "Espera (Hrs)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLoteMateriaPrima.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblLoteMateriaPrima.setSurrendersFocusOnKeystroke(true);
        tblLoteMateriaPrima.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoteMateriaPrimaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLoteMateriaPrima);
        if (tblLoteMateriaPrima.getColumnModel().getColumnCount() > 0) {
            tblLoteMateriaPrima.getColumnModel().getColumn(0).setMinWidth(20);
            tblLoteMateriaPrima.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblLoteMateriaPrima.getColumnModel().getColumn(0).setMaxWidth(20);
            tblLoteMateriaPrima.getColumnModel().getColumn(1).setMinWidth(20);
            tblLoteMateriaPrima.getColumnModel().getColumn(1).setPreferredWidth(20);
            tblLoteMateriaPrima.getColumnModel().getColumn(1).setMaxWidth(20);
            tblLoteMateriaPrima.getColumnModel().getColumn(2).setMinWidth(80);
            tblLoteMateriaPrima.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblLoteMateriaPrima.getColumnModel().getColumn(2).setMaxWidth(80);
            tblLoteMateriaPrima.getColumnModel().getColumn(3).setMinWidth(100);
            tblLoteMateriaPrima.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblLoteMateriaPrima.getColumnModel().getColumn(3).setMaxWidth(100);
            tblLoteMateriaPrima.getColumnModel().getColumn(4).setMinWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(4).setMaxWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(5).setMinWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(5).setPreferredWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(5).setMaxWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(6).setMinWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(6).setPreferredWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(6).setMaxWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(7).setMinWidth(80);
            tblLoteMateriaPrima.getColumnModel().getColumn(7).setPreferredWidth(80);
            tblLoteMateriaPrima.getColumnModel().getColumn(7).setMaxWidth(80);
            tblLoteMateriaPrima.getColumnModel().getColumn(8).setMinWidth(500);
            tblLoteMateriaPrima.getColumnModel().getColumn(8).setPreferredWidth(500);
            tblLoteMateriaPrima.getColumnModel().getColumn(9).setMinWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(9).setPreferredWidth(150);
            tblLoteMateriaPrima.getColumnModel().getColumn(10).setMinWidth(300);
            tblLoteMateriaPrima.getColumnModel().getColumn(10).setPreferredWidth(300);
            tblLoteMateriaPrima.getColumnModel().getColumn(10).setMaxWidth(300);
            tblLoteMateriaPrima.getColumnModel().getColumn(11).setPreferredWidth(500);
            tblLoteMateriaPrima.getColumnModel().getColumn(12).setMinWidth(120);
            tblLoteMateriaPrima.getColumnModel().getColumn(12).setPreferredWidth(120);
            tblLoteMateriaPrima.getColumnModel().getColumn(12).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        txtPesquisarMetodologia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarMetodologiaKeyReleased(evt);
            }
        });

        jLabel4.setText("Pesquisar:");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_edit.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);
        jToolBar1.add(jSeparator1);

        btnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_atualizar.png"))); // NOI18N
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setFocusable(false);
        btnAtualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtualizar.setPreferredSize(new java.awt.Dimension(60, 60));
        btnAtualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAtualizar);
        jToolBar1.add(jSeparator2);

        btnAtualizar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_info_32.png"))); // NOI18N
        btnAtualizar1.setText("Info");
        btnAtualizar1.setToolTipText("");
        btnAtualizar1.setFocusable(false);
        btnAtualizar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtualizar1.setPreferredSize(new java.awt.Dimension(60, 60));
        btnAtualizar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizar1ActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAtualizar1);

        jLabel11.setText("Visualizar:");

        cmbLimitPorPagina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1000", "10000", "100000", "1000000", "10000000" }));
        cmbLimitPorPagina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLimitPorPaginaActionPerformed(evt);
            }
        });

        jLabel13.setText("Status:");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Para Hoje", "Para Finalizar", "Finalizados", "Micro" }));
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMetodologiaLayout = new javax.swing.GroupLayout(pnlMetodologia);
        pnlMetodologia.setLayout(pnlMetodologiaLayout);
        pnlMetodologiaLayout.setHorizontalGroup(
            pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMetodologiaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMetodologiaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarMetodologia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbLimitPorPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlMetodologiaLayout.setVerticalGroup(
            pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMetodologiaLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addGroup(pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbLimitPorPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGroup(pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPesquisarMetodologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(12, 12, 12)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Programação", pnlMetodologia);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Auditoria"));

        tblAuditoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lote_ID", "Versão", "MOD", "Lote", "Material_ID", "Material_MOD", "Metodo1_ID", "Metodo1_MOD", "Metodo2_ID", "Metodo2_MOD", "Metodo3_ID", "Metodo3_MOD", "Computador / AD_User ", "Usuario", "Data Modificação", "Motivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblAuditoria);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );

        txtPesquisarAuditoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarAuditoriaKeyReleased(evt);
            }
        });

        jLabel6.setText("Pesquisar:");

        jLabel15.setText("Visualizar:");

        cmbLimitPorPaginaAuditoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1000", "10000", "100000", "1000000", "10000000" }));
        cmbLimitPorPaginaAuditoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLimitPorPaginaAuditoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAuditoriaGruposLayout = new javax.swing.GroupLayout(pnlAuditoriaGrupos);
        pnlAuditoriaGrupos.setLayout(pnlAuditoriaGruposLayout);
        pnlAuditoriaGruposLayout.setHorizontalGroup(
            pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAuditoriaGruposLayout.createSequentialGroup()
                .addGroup(pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlAuditoriaGruposLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarAuditoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbLimitPorPaginaAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlAuditoriaGruposLayout.setVerticalGroup(
            pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditoriaGruposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbLimitPorPaginaAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15))
                    .addGroup(pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPesquisarAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAuditTrailLayout = new javax.swing.GroupLayout(pnlAuditTrail);
        pnlAuditTrail.setLayout(pnlAuditTrailLayout);
        pnlAuditTrailLayout.setHorizontalGroup(
            pnlAuditTrailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditTrailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAuditoriaGrupos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAuditTrailLayout.setVerticalGroup(
            pnlAuditTrailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditTrailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAuditoriaGrupos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Audit Trail", pnlAuditTrail);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblLoteMateriaPrimaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoteMateriaPrimaMouseClicked
        if (evt.getClickCount() == 2) {
            atualizar();
        }
    }//GEN-LAST:event_tblLoteMateriaPrimaMouseClicked

    private void txtPesquisarMetodologiaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarMetodologiaKeyReleased
        TableSorter.TableSorter(tblLoteMateriaPrima, txtPesquisarMetodologia);
    }//GEN-LAST:event_txtPesquisarMetodologiaKeyReleased

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tblLoteMateriaPrima.getSelectedRow() != -1) {
            atualizar();
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        readLoteStatus();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void cmbLimitPorPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLimitPorPaginaActionPerformed
        readLoteStatus();
    }//GEN-LAST:event_cmbLimitPorPaginaActionPerformed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        tblLoteMateriaPrima.setRowSorter(null);
        String text = null;
        Integer indice = null;
        switch (cmbStatus.getSelectedItem().toString()) {
            case "Todos":
                text = "";
                indice = null;
                break;
            case "Para Hoje":
                text = DataHora.DateSql();
                indice = 5;
                break;
            case "Para Finalizar":
                text = "Amarelo";
                indice = 0;
                break;
            case "Finalizados":
                text = "Verde";
                indice = 0;
                break;
            case "Micro":
                text = "Azul";
                indice = 1;
                break;
        }
        TableSorter.TableTextSorter(tblLoteMateriaPrima, text, indice);
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void btnAtualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizar1ActionPerformed
        new FrmInfoLegendaCoresMateriaPrima(this, true).setVisible(true);
    }//GEN-LAST:event_btnAtualizar1ActionPerformed

    private void txtPesquisarAuditoriaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarAuditoriaKeyReleased
        TableSorter.TableSorter(tblAuditoria, txtPesquisarAuditoria);
    }//GEN-LAST:event_txtPesquisarAuditoriaKeyReleased

    private void cmbLimitPorPaginaAuditoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLimitPorPaginaAuditoriaActionPerformed
        carregarAuditoria();
    }//GEN-LAST:event_cmbLimitPorPaginaAuditoriaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmProgramacaoMateriaPrima.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrmProgramacaoMateriaPrima().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnAtualizar1;
    public static javax.swing.JButton btnEditar;
    private javax.swing.JComboBox<String> cmbLimitPorPagina;
    private javax.swing.JComboBox<String> cmbLimitPorPaginaAuditoria;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel pnlAuditTrail;
    private javax.swing.JPanel pnlAuditoriaGrupos;
    private javax.swing.JPanel pnlMetodologia;
    private javax.swing.JTable tblAuditoria;
    private javax.swing.JTable tblLoteMateriaPrima;
    private javax.swing.JTextField txtPesquisarAuditoria;
    private javax.swing.JTextField txtPesquisarMetodologia;
    // End of variables declaration//GEN-END:variables

    private void readLoteStatus() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        DefaultTableModel model = (DefaultTableModel) tblLoteMateriaPrima.getModel();
        int[] rows = {4, 5, 6};
        TableSorter.RowSorter(tblLoteMateriaPrima, rows, null);
        DateCellRendererStatus r = new DateCellRendererStatus();
        tblLoteMateriaPrima.setDefaultRenderer(Object.class, r);
        LoteMateriaPrimaDAO loteDAO = new LoteMateriaPrimaDAO();
        model.setNumRows(0);
        Integer max = Integer.parseInt(cmbLimitPorPagina.getSelectedItem().toString());
        try {
            List<Object[]> list;
            if (planoAnlaise_id == null) {
                list = loteDAO.findLoteStatus(max);
            } else {
                list = loteDAO.findLoteStatus(max, planoAnlaise_id);
            }
            for (Object[] objects : list) {
                model.addRow(new Object[]{
                    objects[9].toString().equals("0") ? ((Date) objects[2] == null ? ""
                    : ((Date) objects[2]).before(new Date()) ? "Vermelho" : "")
                    : (Date) objects[14] != null ? "Magenta"
                    : objects[10].toString().equals(objects[9].toString()) ? "Verde"
                    : ((BigInteger) objects[9]).equals(((BigInteger) objects[10]).add(BigInteger.ONE)) ? "Amarelo"
                    : ((Date) objects[2] == null ? ""
                    : ((Date) objects[2]).before(new Date()) ? "Vermelho" : ""),
                    (Integer) objects[11] == null ? "" : "Azul",
                    (Integer) objects[0],
                    objects[1].toString(),
                    (Date) objects[2] == null ? "X" : (Date) objects[2],
                    (Date) objects[3],
                    (Date) objects[12],
                    (Integer) objects[7],
                    objects[8].toString(),
                    planoAnlaise_id == null
                    ? objects[10].toString() + " / " + objects[9].toString()
                    : objects[15].toString(),
                    objects[5] == null ? "" : DataHora.getStringDateTime((Date) objects[5])
                    + " - " + objects[6].toString(),
                    objects[4],
                    objects[13] == null ? 0 : (Integer) objects[13] / 60
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void atualizar() {
        if (AcessoSistema.editarDados(ACESSO)) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            FrmCarregando frmCarregar = new FrmCarregando(null, true);
            Thread th = new Thread() {
                @Override
                public void run() {
                    frmCarregar.setVisible(true);
                }
            };
            Thread t1 = new Thread() {
                @Override
                public void run() {
                    try {
                        th.start();
                        LoteMateriaPrimaDAO loteDAO = new LoteMateriaPrimaDAO();
                        LoteMateriaPrima lote = loteDAO.findById(LoteMateriaPrima.class,
                                new Long((Integer) tblLoteMateriaPrima.getValueAt(tblLoteMateriaPrima.getSelectedRow(), 2)));
                        if (planoAnlaise_id != null) {
                            FrmProgramacaoMateriaPrimaStatus frm = new FrmProgramacaoMateriaPrimaStatus(lote, planoAnlaise_id);
                            frmCarregar.dispose();
                            frm.setVisible(true);
                        } else {
                            FrmProgramacaoMateriaPrimaStatus frm = new FrmProgramacaoMateriaPrimaStatus(lote);
                            frmCarregar.dispose();
                            frm.setVisible(true);
                        }
                    } catch (Exception e) {
                        frmCarregar.dispose();
                        JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
                    }
                }
            };
            t1.start();
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void carregarAuditoria() {
//        DefaultTableModel model = (DefaultTableModel) tblAuditoria.getModel();
//        LoteMateriaPrimaDAO loteDAO = new LoteMateriaPrimaDAO();
//        Integer max = Integer.parseInt(cmbLimitPorPaginaAuditoria.getSelectedItem().toString());
//        model.setNumRows(0);
//        try {
//            for (LoteMateriaPrima lote : loteDAO.readAuditoria(max)) {
//                model.addRow(new Object[]{
//                    lote.getId(),
//                    lote.getVersion(),
//                    lote.getAudit().getMOD() == 0 ? "Criado"
//                    : (lote.getAudit().getMOD() == 1 ? "Modificado" : "Removido"),
//                    lote.getLote(),
//                    lote.getLote_MOD() == false ? "Não Alterado" : "Alterado",
//                    lote.getMaterial().getId(),
//                    lote.getMaterial_MOD() == false ? "Não Alterado" : "Alterado",
//                    lote.getMetodologia().getId(),
//                    lote.getMetodologia_MOD() == false ? "Não Alterado" : "Alterado",
//                    lote.getMetodologia2().getId(),
//                    lote.getMetodologia2_MOD() == false ? "Não Alterado" : "Alterado",
//                    lote.getMetodologia3().getId(),
//                    lote.getMetodologia3_MOD() == false ? "Não Alterado" : "Alterado",
//                    lote.getAudit().getComputador() + " / "
//                    + lote.getAudit().getUserComputador(),
//                    lote.getAudit().getUltimaModificacaoPor(),
//                    DataHora.getStringDateTime(lote.getAudit().getUltimaModificacao()),
//                    lote.getAudit().getMotivo()
//                });
//            }
//        } catch (Exception e) {
//        }
    }
}

class DateCellRendererStatus extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        Component tableCellRendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if ("Vermelho".equals(value)) {
            tableCellRendererComponent.setBackground(Color.RED);
        } else if ("Verde".equals(value)) {
            tableCellRendererComponent.setBackground(Color.GREEN.darker());
        } else if ("Azul".equals(value)) {
            tableCellRendererComponent.setBackground(Color.BLUE);
        } else if ("Amarelo".equals(value)) {
            tableCellRendererComponent.setBackground(Color.YELLOW.darker());
        } else if ("Magenta".equals(value)) {
            tableCellRendererComponent.setBackground(Color.MAGENTA);
        } else if ("EM CQ".equals(value)) {
            tableCellRendererComponent.setBackground(Color.MAGENTA);
        } else if ("EM ANALISE".equals(value)) {
            tableCellRendererComponent.setBackground(Color.CYAN);
        } else if ("EM ESPERA".equals(value)) {
            tableCellRendererComponent.setBackground(Color.GRAY);
        } else {
            tableCellRendererComponent.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
        }
        if (value instanceof Date) {
            String strDate = new SimpleDateFormat("dd/MM/yyyy HH:mm").format((Date) value);
            this.setText(strDate);
        }
        return tableCellRendererComponent;
    }

}
