/*
 * Copyright (C) 2020 rafael
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.cadastro;

import br.com.lablims.dao.ArquivosDAO;
import br.com.lablims.util.Frames;
import br.com.lablims.model.Equipamento;
import br.com.lablims.dao.EquipamentoDAO;
import br.com.lablims.dao.EscalaMedidaDAO;
import br.com.lablims.dao.SetorDAO;
import br.com.lablims.dao.TipoEquipamentoDAO;
import br.com.lablims.model.Arquivos;
import br.com.lablims.model.EscalaMedida;
import br.com.lablims.model.Setor;
import br.com.lablims.model.TipoEquipamento;
import br.com.lablims.util.ComboBox;
import br.com.lablims.util.Pdf;
import br.com.lablims.util.Senha;
import java.awt.Cursor;
import java.io.File;
import java.util.TreeMap;
import javax.swing.JOptionPane;

/**
 *
 * @author rafael
 */
public class FrmEquipamentoDados extends javax.swing.JDialog {

    private Equipamento equipamento;
    private boolean novo = false;
    private final TreeMap<Long, String> categoryMapSetor = new TreeMap<>();
    private final TreeMap<Long, String> categoryMapTipo = new TreeMap<>();
    private final TreeMap<Long, String> categoryMapEscala = new TreeMap<>();
    private File certificado = null;
    private File manual = null;

    /**
     * Creates new form FrmCromatografoDados
     *
     * @param parent
     * @param modal
     */
    public FrmEquipamentoDados(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Frames.setUpFrame(this, "Dados do Equipamento", true);
        novo = true;
        carregar();
    }

    public FrmEquipamentoDados(java.awt.Frame parent, boolean modal, Equipamento equip) {
        super(parent, modal);
        initComponents();
        Frames.setUpFrame(this, "Dados do Equipamento", true);
        equipamento = equip;
        carregar();
        carregarDados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        txtTag = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtModelo = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        cmbSetor = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtProcedimento = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFabricante = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSerial = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        jLabel23 = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox();
        jLabel41 = new javax.swing.JLabel();
        txtDataUltimaCalibracao = new com.toedter.calendar.JDateChooser();
        jLabel42 = new javax.swing.JLabel();
        txtDataProximaCalibracao = new com.toedter.calendar.JDateChooser();
        jLabel38 = new javax.swing.JLabel();
        txtArquivoCertificado = new javax.swing.JTextField();
        btnAnexarCertificado = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        txtArquivoManual = new javax.swing.JTextField();
        btnAnexarManual = new javax.swing.JButton();
        chbAtivo = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        cmbEscala = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnSalvar.setText("Ok");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Equipamento"));

        jLabel1.setText("Tag:");

        jLabel2.setText("Modelo:");

        jLabel22.setText("Setor:");

        cmbSetor.setEditable(true);

        jLabel5.setText("Procedimento:");

        jLabel21.setText("Descrição:");

        jLabel12.setText("n° Serial:");

        jLabel6.setText("Fabricante:");

        txtSerial.setColumns(20);
        txtSerial.setRows(5);
        jScrollPane1.setViewportView(txtSerial);

        jLabel13.setText("Obs:");

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane2.setViewportView(txtObs);

        jLabel23.setText("Tipo:");

        cmbTipo.setEditable(true);

        jLabel41.setText("Última Calib.:");

        jLabel42.setText("Proxima Calib.:");

        jLabel38.setText("Certificado:");

        txtArquivoCertificado.setEditable(false);

        btnAnexarCertificado.setText("Anexar");
        btnAnexarCertificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnexarCertificadoActionPerformed(evt);
            }
        });

        jLabel39.setText("Manual:");

        txtArquivoManual.setEditable(false);

        btnAnexarManual.setText("Anexar");
        btnAnexarManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnexarManualActionPerformed(evt);
            }
        });

        chbAtivo.setText("Ativo");
        chbAtivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbAtivoActionPerformed(evt);
            }
        });

        jLabel24.setText("Escala:");

        cmbEscala.setEditable(true);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProcedimento)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(cmbEscala, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(txtDescricao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chbAtivo))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(txtTag, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtDataUltimaCalibracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtDataProximaCalibracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(4, 4, 4)))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtArquivoManual, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAnexarManual))
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                            .addComponent(txtArquivoCertificado)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnAnexarCertificado))
                                        .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(chbAtivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel23)
                    .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(cmbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtArquivoCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAnexarCertificado)
                        .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtDataUltimaCalibracao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel41, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAnexarManual)
                            .addComponent(txtArquivoManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39)))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDataProximaCalibracao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtProcedimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(cmbEscala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnSalvar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        EquipamentoDAO cromaDAO = new EquipamentoDAO();
        Senha senha = new Senha();
        try {
            if (txtDescricao.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Descrição inválida");
                txtDescricao.requestFocus();
            }
            else if (txtTag.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Tag inválido");
                txtTag.requestFocus();
            } 
            else if (cmbTipo.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Tipo de Equipamento inválido");
                cmbTipo.requestFocus();
            }else if (cmbSetor.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Setor inválido");
                cmbSetor.requestFocus();
            } else if (txtFabricante.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Fabricante inválido");
                txtFabricante.requestFocus();
            } else if (txtModelo.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Modelo inválido");
                txtModelo.requestFocus();
            } else if (txtSerial.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Serial Number inválido");
                txtSerial.requestFocus();
            } else if (novo) {
                if (cromaDAO.checkCromatografoIsExits(txtTag.getText().trim())) {
                    JOptionPane.showMessageDialog(null, "Cromatógrafo já existe");
                    txtTag.requestFocus();
                } else {
                    if (senha.Salvar()) {
                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        criarCromatografo();
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        dispose();
                    }
                }
            } else {
                if (senha.Salvar()) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    atulizarCromatografo();
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    dispose();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }//GEN-LAST:event_btnSalvarActionPerformed
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        fechar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAnexarCertificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnexarCertificadoActionPerformed
        try {
            certificado = Pdf.carregar();
            if (certificado != null) {
                txtArquivoCertificado.setText(certificado.getName());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao anexar dados: " + ex);
        }
    }//GEN-LAST:event_btnAnexarCertificadoActionPerformed

    private void btnAnexarManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnexarManualActionPerformed
        try {
            manual = Pdf.carregar();
            if (manual != null) {
                txtArquivoManual.setText(manual.getName());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao anexar dados: " + ex);
        }
    }//GEN-LAST:event_btnAnexarManualActionPerformed

    private void chbAtivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbAtivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbAtivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmEquipamentoDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmEquipamentoDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmEquipamentoDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEquipamentoDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmEquipamentoDados dialog = new FrmEquipamentoDados(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnexarCertificado;
    private javax.swing.JButton btnAnexarManual;
    private javax.swing.JButton btnCancelar;
    public static javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox chbAtivo;
    private javax.swing.JComboBox cmbEscala;
    private javax.swing.JComboBox cmbSetor;
    private javax.swing.JComboBox cmbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtArquivoCertificado;
    private javax.swing.JTextField txtArquivoManual;
    public static com.toedter.calendar.JDateChooser txtDataProximaCalibracao;
    public static com.toedter.calendar.JDateChooser txtDataUltimaCalibracao;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtFabricante;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtProcedimento;
    private javax.swing.JTextArea txtSerial;
    private javax.swing.JTextField txtTag;
    // End of variables declaration//GEN-END:variables

    private void carregar() {
        try {
            readTipo();
            readSetor();
            readEscala();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atulalizar dados: " + e);
        }
    }

    private void criarCromatografo() {
        Equipamento equip = new Equipamento();
        EquipamentoDAO equipDAO = new EquipamentoDAO();
        SetorDAO setorDAO = new SetorDAO();
        TipoEquipamentoDAO tipoDAO = new TipoEquipamentoDAO();
        EscalaMedidaDAO escalaDAO = new EscalaMedidaDAO();
        try {
            equip.setDescricao(txtDescricao.getText().trim().toUpperCase());
            equip.setTag(txtTag.getText().trim().toUpperCase());
            equip.setAtivo(chbAtivo.isSelected());
            equip.setTipo(tipoDAO.findById(TipoEquipamento.class,
                    ComboBox.getKeyForValue(cmbTipo.getSelectedItem().toString(), categoryMapTipo)));
            equip.setSetor(setorDAO.findById(Setor.class,
                    ComboBox.getKeyForValue(cmbSetor.getSelectedItem().toString(), categoryMapSetor)));
            equip.setEscala(escalaDAO.findById(EscalaMedida.class,
                    ComboBox.getKeyForValue(cmbEscala.getSelectedItem().toString(), categoryMapEscala)));
            equip.setFabricante(txtFabricante.getText().trim().toUpperCase());
            equip.setModelo(txtModelo.getText().trim().toUpperCase());
            equip.setProcedimento(txtProcedimento.getText().trim().toUpperCase());
            equip.setUltimaCalibracao(txtDataUltimaCalibracao.getDate());
            equip.setProximaCalibracao(txtDataProximaCalibracao.getDate());
            equip.setSerialNumber(txtSerial.getText());
            equip.setObs(txtObs.getText().trim());
            if (certificado != null) {
                equip.setCertificado(Pdf.salvar(certificado, "Certificado"));
            }
            if (manual != null) {
                equip.setManual(Pdf.salvar(manual, "Manual"));
            }
            equip.setVersion(0);
            equipDAO.salvar(equip);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void atulizarCromatografo() {
        EquipamentoDAO equipDAO = new EquipamentoDAO();
        SetorDAO setorDAO = new SetorDAO();
        TipoEquipamentoDAO tipoDAO = new TipoEquipamentoDAO();
        EscalaMedidaDAO escalaDAO = new EscalaMedidaDAO();
        try {
            Equipamento equip = equipDAO.findById(Equipamento.class, equipamento.getId());
            equip.setDescricao(txtDescricao.getText().trim().toUpperCase());
            equip.setTag(txtTag.getText().trim().toUpperCase());
            equip.setAtivo(chbAtivo.isSelected());
            equip.setTipo(tipoDAO.findById(TipoEquipamento.class,
                    ComboBox.getKeyForValue(cmbTipo.getSelectedItem().toString(), categoryMapTipo)));
            equip.setSetor(setorDAO.findById(Setor.class,
                    ComboBox.getKeyForValue(cmbSetor.getSelectedItem().toString(), categoryMapSetor)));
            equip.setEscala(escalaDAO.findById(EscalaMedida.class,
                    ComboBox.getKeyForValue(cmbEscala.getSelectedItem().toString(), categoryMapEscala)));
            equip.setFabricante(txtFabricante.getText().trim().toUpperCase());
            equip.setModelo(txtModelo.getText().trim().toUpperCase());
            equip.setProcedimento(txtProcedimento.getText().trim().toUpperCase());
            equip.setUltimaCalibracao(txtDataUltimaCalibracao.getDate());
            equip.setProximaCalibracao(txtDataProximaCalibracao.getDate());
            equip.setSerialNumber(txtSerial.getText());
            equip.setObs(txtObs.getText().trim());
            if (certificado != null) {
                equip.setCertificado(Pdf.salvar(certificado, "Certificado"));
            }
            if (manual != null) {
                equip.setManual(Pdf.salvar(manual, "Manual"));
            }
            equip.setVersion(equipamento.getVersion() + 1);
            equipDAO.salvar(equip);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
        }
    }

    private void carregarDados() {
        try {
            txtDescricao.setText(equipamento.getDescricao());
            txtTag.setText(equipamento.getTag());
            chbAtivo.setSelected(equipamento.getAtivo());
            txtProcedimento.setText(equipamento.getProcedimento());
            txtFabricante.setText(equipamento.getFabricante());
            txtModelo.setText(equipamento.getModelo());
            txtDataUltimaCalibracao.setDate(equipamento.getUltimaCalibracao());
            txtDataProximaCalibracao.setDate(equipamento.getProximaCalibracao());
            txtSerial.setText(equipamento.getSerialNumber());
            txtObs.setText(equipamento.getObs());
            String[] tipo = {equipamento.getTipo().getTipo()};
            cmbTipo.setSelectedItem(tipo[0]);
            String[] setor = {equipamento.getSetor().getSetor()};
            cmbSetor.setSelectedItem(setor[0]);
            String[] escala = {equipamento.getEscala().getEscala()};
            cmbEscala.setSelectedItem(escala[0]);
            try {
                Arquivos aquivoCertificado = new ArquivosDAO().findById(Arquivos.class, equipamento.getCertificado().getId());
                Arquivos aquivoManual = new ArquivosDAO().findById(Arquivos.class, equipamento.getManual().getId());
                if (aquivoCertificado != null) {
                    txtArquivoCertificado.setText(aquivoCertificado.getNome());
                }
                if (aquivoManual != null) {
                    txtArquivoManual.setText(aquivoManual.getNome());
                }
            } catch (Exception e) {
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + ex);
        }
    }

     private void readSetor() {
        cmbSetor.removeAllItems();
        cmbSetor.addItem("");
        categoryMapSetor.clear();
        SetorDAO setorDAO = new SetorDAO();
        try {
            for (Setor setor : setorDAO.findEntities(Setor.class, "setor", true)) {
                Long id = setor.getId();
                String name = setor.getSetor();
                cmbSetor.addItem(name);
                categoryMapSetor.put(id, name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }
    
     private void readTipo() {
        cmbTipo.removeAllItems();
        cmbTipo.addItem("");
        categoryMapTipo.clear();
        TipoEquipamentoDAO tipoDAO = new TipoEquipamentoDAO();
        try {
            for (TipoEquipamento tipo : tipoDAO.findAll()) {
                Long id = tipo.getId();
                String name = tipo.getTipo();
                cmbTipo.addItem(name);
                categoryMapTipo.put(id, name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }
     
     private void readEscala() {
        cmbEscala.removeAllItems();
        categoryMapEscala.clear();
        EscalaMedidaDAO escalaDAO = new EscalaMedidaDAO();
        try {
            for (EscalaMedida escala : escalaDAO.findEntities(EscalaMedida.class, "escala", true)) {
                Long id = escala.getId();
                String name = escala.getEscala();
                cmbEscala.addItem(name);
                categoryMapEscala.put(id, name);
            }
        cmbEscala.setSelectedItem("N/A");    
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

    private void fechar() {
        Frames.fecharFrame(this);
    }

}
