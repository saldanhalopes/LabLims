/*
 * Copyright (C) 2019 rafael.lopes
 *
 * Este programa é um software livre: você pode redistribuí-lo e / ou modificar
 * sob os termos da GNU General Public License, conforme publicado pela
 * a Free Software Foundation, seja a versão 3 da Licença, quanto
 * qualquer versão posterior.
 *
 * Este programa é distribuído na esperança de que seja útil,
 * mas SEM QUALQUER GARANTIA; sem a garantia implícita de
 * COMERCIALIZAÇÃO OU APTIDÃO PARA UM PROPÓSITO PARTICULAR. Veja o
 * GNU General Public License para obter mais detalhes.
 *
 * Você deve ter recebido uma cópia da GNU General Public License
 *  juntamente com este programa. Caso contrário, veja <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.cadastro;

import br.com.lablims.dao.AnaliseDAO;
import br.com.lablims.dao.AnaliseTipoDAO;
import br.com.lablims.dao.PlanoAnaliseDAO;
import br.com.lablims.dao.MetodologiaDAO;
import br.com.lablims.dao.SetorDAO;
import br.com.lablims.model.Analise;
import br.com.lablims.model.AnaliseTipo;
import br.com.lablims.model.Metodologia;
import br.com.lablims.model.PlanoAnalise;
import br.com.lablims.util.Senha;
import br.com.lablims.model.Setor;
import br.com.lablims.util.ComboBox;
import br.com.lablims.util.Frames;
import java.awt.Cursor;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author rafael.lopes
 */
public class FrmPlanoAnaliseDados extends javax.swing.JDialog {

    private TreeMap<Long, String> categoryMapAnalise = new TreeMap<>();
    private TreeMap<Long, String> categoryMapAnaliseTipo = new TreeMap<>();
    private TreeMap<Long, String> categoryMapSetor = new TreeMap<>();
    private PlanoAnalise planoAnalise;
    private Metodologia metodologia;
    private Boolean novoMetodologiaAnalise = false;

    /**
     * Creates new form FrmMetodologiaAnaliseDados
     */
    public FrmPlanoAnaliseDados(java.awt.Frame parent, boolean modal, Metodologia mtd, Boolean novo) {
        super(parent, modal);
        initComponents();
        Frames.setUpFrame(this, "Configurar Análise", true);
        metodologia = mtd;
        novoMetodologiaAnalise = novo;
        carregarCampos();
        carregar();
    }

    public FrmPlanoAnaliseDados(java.awt.Frame parent, boolean modal, PlanoAnalise pa) {
        super(parent, modal);
        initComponents();
        Frames.setUpFrame(this, "Configurar Análise", true);
        planoAnalise = pa;
        carregarCampos();
        carregar();
        preencher();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbAnalise = new javax.swing.JComboBox();
        cmbAnaliseTipo = new javax.swing.JComboBox();
        cmbSetor = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        btnAdicionarModelo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMin = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        txtMedio = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        txtMax = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Analise"));

        jLabel8.setText("Análise:");

        jLabel9.setText("Tipo Análise:");

        jLabel3.setText("Setor:");

        jLabel10.setText("Descrição:");

        btnAdicionarModelo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_preparo.png"))); // NOI18N
        btnAdicionarModelo.setText("Importar");
        btnAdicionarModelo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdicionarModelo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnAdicionarModelo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdicionarModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarModeloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbSetor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAnaliseTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAnalise, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDescricao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdicionarModelo)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbAnalise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbAnaliseTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addComponent(btnAdicionarModelo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lead Time"));

        jLabel1.setText("Tempo Mínimo");

        jLabel2.setText("Tempo Médio");

        jLabel4.setText("Tempo Máximo");

        jLabel5.setText("min");

        jLabel6.setText("min");

        jLabel7.setText("min");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMedio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addContainerGap(338, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMedio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        fechar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        salvar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAdicionarModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarModeloActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        PlanoAnalise pa = new PlanoAnalise();
        FrmProcurarPlanoAnalise frm = new FrmProcurarPlanoAnalise(null, true, pa);
        frm.setVisible(true);
        if (pa.getDescricao() != null) {
            String[] analise = {pa.getAnalise().getAnalise()};
            cmbAnalise.setSelectedItem(analise[0]);
            String[] analiseTipo = {pa.getAnaliseTipo().getAnaliseTipo()};
            cmbAnaliseTipo.setSelectedItem(analiseTipo[0]);
            String[] setor = {pa.getSetor().getSetor()};
            cmbSetor.setSelectedItem(setor[0]);
            txtDescricao.setText(pa.getDescricao());
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnAdicionarModeloActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPlanoAnaliseDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPlanoAnaliseDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPlanoAnaliseDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPlanoAnaliseDados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FrmPlanoAnaliseDados dialog = new FrmPlanoAnaliseDados(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarModelo;
    private javax.swing.JComboBox cmbAnalise;
    private javax.swing.JComboBox cmbAnaliseTipo;
    private javax.swing.JComboBox cmbSetor;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JSpinner txtMax;
    private javax.swing.JSpinner txtMedio;
    private javax.swing.JSpinner txtMin;
    // End of variables declaration//GEN-END:variables

    private void carregar() {
        try {
            readAnalise();
            readAnaliseTipo();
            readSetor();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atulalizar dados: " + e);
        }
    }

    private void preencher() {
        String[] analise = {planoAnalise.getAnalise().getAnalise()};
        cmbAnalise.setSelectedItem(analise[0]);
        String[] analiseTipo = {planoAnalise.getAnaliseTipo().getAnaliseTipo()};
        cmbAnaliseTipo.setSelectedItem(analiseTipo[0]);
        String[] setor = {planoAnalise.getSetor().getSetor()};
        cmbSetor.setSelectedItem(setor[0]);
        txtDescricao.setText(planoAnalise.getDescricao());
        txtMin.setValue(planoAnalise.getLeadTimeMin());
        txtMedio.setValue(planoAnalise.getLeadTimeMedio());
        txtMax.setValue(planoAnalise.getLeadTimeMax());
    }

    private void readAnalise() {
        cmbAnalise.removeAllItems();
        cmbAnalise.addItem("");
        categoryMapAnalise.clear();
        AnaliseDAO analiseDAO = new AnaliseDAO();
        try {
            for (Analise analise : analiseDAO.findEntities(Analise.class, "analise", true)) {
                Long id = analise.getId();
                String name = analise.getAnalise();
                cmbAnalise.addItem(name);
                categoryMapAnalise.put(id, name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

    private void readAnaliseTipo() {
        cmbAnaliseTipo.removeAllItems();
        cmbAnaliseTipo.addItem("");
        categoryMapAnaliseTipo.clear();
        AnaliseTipoDAO analiseTipoDAO = new AnaliseTipoDAO();
        try {
            for (AnaliseTipo analiseTipo : analiseTipoDAO.findEntities(AnaliseTipo.class, "analiseTipo", true)) {
                Long id = analiseTipo.getId();
                String name = analiseTipo.getAnaliseTipo();
                cmbAnaliseTipo.addItem(name);
                categoryMapAnaliseTipo.put(id, name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

    private void readSetor() {
        cmbSetor.removeAllItems();
        cmbSetor.addItem("");
        categoryMapSetor.clear();
        SetorDAO setorDAO = new SetorDAO();
        try {
            for (Setor setor : setorDAO.findEntities(Setor.class, "setor", true)) {
                Long id = setor.getId();
                String name = setor.getSetor();
                cmbSetor.addItem(name);
                categoryMapSetor.put(id, name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

    private void carregarCampos() {
        txtDescricao.setText(null);
        txtMin.setModel(new SpinnerNumberModel(0, 0, 1000000, 1));
        txtMedio.setModel(new SpinnerNumberModel(0, 0, 1000000, 1));
        txtMax.setModel(new SpinnerNumberModel(0, 0, 1000000, 1));
    }

    private void fechar() {
        Frames.fecharFrame(this);
    }

    private void salvar() {
        Senha senha = new Senha();
        try {
            if (txtDescricao.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Descrição Inválida!");
                txtDescricao.requestFocus();
            } else if (cmbAnalise.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Selecione a Analise!");
                cmbAnalise.requestFocus();
            } else if (cmbAnaliseTipo.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Selecione o Tipo da Analise!");
                cmbAnaliseTipo.requestFocus();
            } else if (cmbSetor.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Selecione o Setor!");
                cmbSetor.requestFocus();
            } else if (novoMetodologiaAnalise) {
                if (senha.Salvar()) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    criarMetodologiaAnalise();
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    dispose();
                }
            } else {
                if (senha.Salvar()) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    atulizarMetodologiaAnalise();
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    dispose();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void criarMetodologiaAnalise() {
        PlanoAnalise pa = new PlanoAnalise();
        PlanoAnaliseDAO paDAO = new PlanoAnaliseDAO();
        try {
            MetodologiaDAO mtdDAO = new MetodologiaDAO();
            AnaliseDAO analiseDAO = new AnaliseDAO();
            AnaliseTipoDAO analiseTipoDAO = new AnaliseTipoDAO();
            SetorDAO setorDAO = new SetorDAO();
            pa.setMetodologia(mtdDAO.findById(Metodologia.class, metodologia.getId()));
            pa.setAnalise(analiseDAO.findById(Analise.class,
                    ComboBox.getKeyForValue(cmbAnalise.getSelectedItem().toString(), categoryMapAnalise)));
            pa.setAnaliseTipo(analiseTipoDAO.findById(AnaliseTipo.class,
                    ComboBox.getKeyForValue(cmbAnaliseTipo.getSelectedItem().toString(), categoryMapAnaliseTipo)));
            pa.setSetor(setorDAO.findById(Setor.class,
                    ComboBox.getKeyForValue(cmbSetor.getSelectedItem().toString(), categoryMapSetor)));
            pa.setDescricao(txtDescricao.getText().trim().toUpperCase());
            pa.setLeadTimeMin((Integer) txtMin.getValue());
            pa.setLeadTimeMedio((Integer) txtMedio.getValue());
            pa.setLeadTimeMax((Integer) txtMax.getValue());
            pa.setVersion(0);
            paDAO.salvar(pa);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void atulizarMetodologiaAnalise() {
        PlanoAnaliseDAO paDAO = new PlanoAnaliseDAO();
        try {
            PlanoAnalise pa = paDAO.findById(PlanoAnalise.class, planoAnalise.getId());
            MetodologiaDAO mtdDAO = new MetodologiaDAO();
            AnaliseDAO analiseDAO = new AnaliseDAO();
            AnaliseTipoDAO analiseTipoDAO = new AnaliseTipoDAO();
            SetorDAO setorDAO = new SetorDAO();
            pa.setMetodologia(mtdDAO.findById(Metodologia.class, planoAnalise.getMetodologia().getId()));
            pa.setAnalise(analiseDAO.findById(Analise.class,
                    ComboBox.getKeyForValue(cmbAnalise.getSelectedItem().toString(), categoryMapAnalise)));
            pa.setAnaliseTipo(analiseTipoDAO.findById(AnaliseTipo.class,
                    ComboBox.getKeyForValue(cmbAnaliseTipo.getSelectedItem().toString(), categoryMapAnaliseTipo)));
            pa.setSetor(setorDAO.findById(Setor.class,
                    ComboBox.getKeyForValue(cmbSetor.getSelectedItem().toString(), categoryMapSetor)));
            pa.setDescricao(txtDescricao.getText().trim().toUpperCase());
            pa.setLeadTimeMin((Integer) txtMin.getValue());
            pa.setLeadTimeMedio((Integer) txtMedio.getValue());
            pa.setLeadTimeMax((Integer) txtMax.getValue());
            pa.setVersion(planoAnalise.getVersion() + 1);
            paDAO.salvar(pa);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
        }
    }
}
