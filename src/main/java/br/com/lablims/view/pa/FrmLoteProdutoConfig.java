/*
 * Copyright (C) 2017 rafael.lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.pa;

import br.com.lablims.dao.AnaliseStatusDAO;
import br.com.lablims.dao.LoteProdutoDAO;
import br.com.lablims.dao.LoteProdutoInfoDAO;
import br.com.lablims.dao.LoteProdutoStatusDAO;
import br.com.lablims.dao.MaterialDAO;
import br.com.lablims.dao.MetodologiaDAO;
import br.com.lablims.dao.PlanoAnaliseDAO;
import br.com.lablims.model.AnaliseStatus;
import br.com.lablims.model.LoteProduto;
import br.com.lablims.model.LoteProdutoInfo;
import br.com.lablims.model.LoteProdutoStatus;
import br.com.lablims.model.Material;
import br.com.lablims.model.Metodologia;
import br.com.lablims.model.PlanoAnalise;
import br.com.lablims.util.DataHora;
import br.com.lablims.util.Senha;
import br.com.lablims.util.FieldFormatLimit;
import br.com.lablims.util.Frames;
import br.com.lablims.util.TableSorter;
import br.com.lablims.view.cadastro.FrmPlanoAnaliseVisualizar;
import br.com.lablims.view.cadastro.FrmProcurarMaterial;
import br.com.lablims.view.cadastro.FrmProcurarMetodologia;
import java.awt.Cursor;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author rafael.lopes
 */
public class FrmLoteProdutoConfig extends javax.swing.JDialog {

    private LoteProduto lote;
    private Material material;
    private Boolean novo_lote;
    private List<Long> mtdsMap = new ArrayList<>();
    private final TreeMap<Long, String> categoryMapUnidade = new TreeMap<>();
    private String status_lote;

    /**
     * Creates new form NewJDialog
     *
     * @param parent
     * @param modal
     */
    public FrmLoteProdutoConfig(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initForm();
        novo_lote = true;
        txtLote.setEditable(true);
    }

    public FrmLoteProdutoConfig(java.awt.Frame parent, boolean modal, LoteProduto lot) {
        super(parent, modal);
        initForm();
        lote = lot;
        novo_lote = false;
        txtLote.setEditable(false);
        carregar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        pnlDadosProduto1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtCodMaterial = new javax.swing.JTextField();
        txtMaterial = new javax.swing.JTextField();
        txtTipo = new javax.swing.JTextField();
        btnProcurarMaterial = new javax.swing.JButton();
        btnPlanoAnalise = new javax.swing.JButton();
        btnProcurarMetodologia = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMetodos = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        txtComplemento = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        pnlDadosLote1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtObs = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtDataPrevisao = new com.toedter.calendar.JDateChooser();
        txtHoraPrevisao = new javax.swing.JSpinner();
        txtMinutoPrevisao = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtLote = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtDataEntrada = new com.toedter.calendar.JDateChooser();
        txtHoraEntrada = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        txtMinutoEntrada = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        txtDataImpressaoRoteiro = new com.toedter.calendar.JDateChooser();
        txtNumeroRoteiro = new javax.swing.JFormattedTextField();
        btnFCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        pnlAuditTrail = new javax.swing.JPanel();
        pnlAuditoriaGrupos = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAuditoria = new javax.swing.JTable();
        txtPesquisarAuditoria = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlDadosProduto1.setBorder(javax.swing.BorderFactory.createTitledBorder("Produto"));

        jLabel16.setText("Métodos:");

        jLabel17.setText("Tipo:");

        jLabel18.setText("Material:");

        txtCodMaterial.setEditable(false);
        txtCodMaterial.setBackground(new java.awt.Color(204, 204, 204));

        txtMaterial.setEditable(false);
        txtMaterial.setBackground(new java.awt.Color(204, 204, 204));

        txtTipo.setEditable(false);
        txtTipo.setBackground(new java.awt.Color(204, 204, 204));

        btnProcurarMaterial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_add_16.png"))); // NOI18N
        btnProcurarMaterial.setText("Material");
        btnProcurarMaterial.setFocusable(false);
        btnProcurarMaterial.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnProcurarMaterial.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnProcurarMaterial.setIconTextGap(15);
        btnProcurarMaterial.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProcurarMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarMaterialActionPerformed(evt);
            }
        });

        btnPlanoAnalise.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_analise_16.png"))); // NOI18N
        btnPlanoAnalise.setText("Análises");
        btnPlanoAnalise.setFocusable(false);
        btnPlanoAnalise.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnPlanoAnalise.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPlanoAnalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanoAnaliseActionPerformed(evt);
            }
        });

        btnProcurarMetodologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_add_16.png"))); // NOI18N
        btnProcurarMetodologia.setText("Metodologia");
        btnProcurarMetodologia.setFocusable(false);
        btnProcurarMetodologia.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnProcurarMetodologia.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnProcurarMetodologia.setIconTextGap(15);
        btnProcurarMetodologia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProcurarMetodologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarMetodologiaActionPerformed(evt);
            }
        });

        txtMetodos.setEditable(false);
        txtMetodos.setBackground(new java.awt.Color(204, 204, 204));
        txtMetodos.setColumns(20);
        txtMetodos.setRows(3);
        jScrollPane1.setViewportView(txtMetodos);

        jLabel20.setText("Compemento:");

        jLabel21.setText("Produto:");

        javax.swing.GroupLayout pnlDadosProduto1Layout = new javax.swing.GroupLayout(pnlDadosProduto1);
        pnlDadosProduto1.setLayout(pnlDadosProduto1Layout);
        pnlDadosProduto1Layout.setHorizontalGroup(
            pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosProduto1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosProduto1Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(pnlDadosProduto1Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnProcurarMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnProcurarMetodologia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPlanoAnalise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDadosProduto1Layout.setVerticalGroup(
            pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosProduto1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17)
                        .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(txtCodMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20)
                        .addComponent(txtComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21))
                    .addComponent(btnProcurarMaterial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlDadosProduto1Layout.createSequentialGroup()
                        .addGroup(pnlDadosProduto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnProcurarMetodologia)
                            .addComponent(jLabel16))
                        .addGap(18, 18, 18)
                        .addComponent(btnPlanoAnalise))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDadosLote1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Lote"));

        jLabel26.setText("N° Roteiro:");

        jLabel4.setText("Obs:");

        jLabel27.setText("Previsão Liberação:");

        jLabel13.setText("h");

        jLabel14.setText("min");

        jLabel1.setText("Lote:");

        jLabel30.setText("Data Entrada:");

        jLabel10.setText("h");

        jLabel19.setText("min");

        jLabel24.setText("Status");

        jLabel31.setText("Impressão Roteiro:");

        javax.swing.GroupLayout pnlDadosLote1Layout = new javax.swing.GroupLayout(pnlDadosLote1);
        pnlDadosLote1.setLayout(pnlDadosLote1Layout);
        pnlDadosLote1Layout.setHorizontalGroup(
            pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtObs))
                    .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                        .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLote1Layout.createSequentialGroup()
                                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDataEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                                    .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                                        .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDataPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                                        .addComponent(txtHoraEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMinutoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel19))
                                    .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                                        .addComponent(txtHoraPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMinutoPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14))))
                            .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtNumeroRoteiro, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlDadosLote1Layout.createSequentialGroup()
                                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtDataImpressaoRoteiro, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlDadosLote1Layout.setVerticalGroup(
            pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosLote1Layout.createSequentialGroup()
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtHoraEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(jLabel19)
                        .addComponent(txtMinutoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumeroRoteiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataImpressaoRoteiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtHoraPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(txtMinutoPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLote1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnFCancelar.setText("Cancelar");
        btnFCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFCancelarActionPerformed(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlDadosLote1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDadosProduto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDadosProduto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDadosLote1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnFCancelar))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Lote de Produto", jPanel2);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Auditoria"));

        tblAuditoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lote_ID", "Versão", "MOD", "Data_Necessidade", "Data_Necessidade_MOD", "Data_Status", "Data_Status_MOD", "Data_Venciamento", "Data_Venciamento_MOD", "Observação", "Observação_MOD", "Data_Previsão", "Data_Previsão_MOD", "Qtd_Estoque", "Qtd_Estoque_MOD", "Qtd_Necessaria", "Qtd_Necessaria_MOD", "Qtd_Volumes", "Qtd_Volumes_MOD", "Status_SAP", "Status_SAP_MOD", "Tempo_Liberação", "Tempo_Liberação_MOD", "Unid_Medida", "Unid_Medida_MOD", "Computador / AD_User ", "Usuario", "Data Modificação", "Motivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAuditoria.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tblAuditoria);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 953, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
        );

        txtPesquisarAuditoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarAuditoriaKeyReleased(evt);
            }
        });

        jLabel5.setText("Pesquisar:");

        javax.swing.GroupLayout pnlAuditoriaGruposLayout = new javax.swing.GroupLayout(pnlAuditoriaGrupos);
        pnlAuditoriaGrupos.setLayout(pnlAuditoriaGruposLayout);
        pnlAuditoriaGruposLayout.setHorizontalGroup(
            pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAuditoriaGruposLayout.createSequentialGroup()
                .addGroup(pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlAuditoriaGruposLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarAuditoria)))
                .addContainerGap())
        );
        pnlAuditoriaGruposLayout.setVerticalGroup(
            pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditoriaGruposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAuditoriaGruposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisarAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAuditTrailLayout = new javax.swing.GroupLayout(pnlAuditTrail);
        pnlAuditTrail.setLayout(pnlAuditTrailLayout);
        pnlAuditTrailLayout.setHorizontalGroup(
            pnlAuditTrailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditTrailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAuditoriaGrupos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAuditTrailLayout.setVerticalGroup(
            pnlAuditTrailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuditTrailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAuditoriaGrupos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Audit Trail", pnlAuditTrail);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        LoteProdutoDAO loteDAO = new LoteProdutoDAO();
        Senha senha = new Senha();
        if (txtCodMaterial.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Material inválido!");
            txtCodMaterial.requestFocus();
        } else if (txtMetodos.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Método inválido!");
            txtMetodos.requestFocus();
        } else if (txtLote.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Lote inválido!");
            txtLote.requestFocus();
        } else if (cmbStatus.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(null, "Status Inválido!");
            cmbStatus.requestFocus();
        } else if (txtLote.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Caixa Inválida!");
        } else if (novo_lote) {
            if (loteDAO.checkLoteProdutoIsExits(txtLote.getText().trim())) {
                JOptionPane.showMessageDialog(null, "Lote já existe!", "Alerta", JOptionPane.ERROR_MESSAGE);
                txtLote.requestFocus();
            } else {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                if (senha.Salvar()) {
                    criar();
                    dispose();
                }
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        } else {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (senha.Salvar()) {
                atualizar();
                dispose();
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnFCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFCancelarActionPerformed
        fechar();
    }//GEN-LAST:event_btnFCancelarActionPerformed

    private void btnProcurarMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarMaterialActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            Material mat = new Material();
            FrmProcurarMaterial frm = new FrmProcurarMaterial(null, true, mat);
            frm.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            if (mat.getId() != null) {
                material = new MaterialDAO().findMaterialMetodologiaById(mat.getId());
                txtCodMaterial.setText(material.getCodMaterial().toString());
                txtMaterial.setText(material.getMaterial());
                txtTipo.setText(material.getTipoMaterial().getSigla());
            }
        } catch (Exception ex) {
            limparRegistro();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnProcurarMaterialActionPerformed

    private void btnPlanoAnaliseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanoAnaliseActionPerformed
        try {
            if (!mtdsMap.isEmpty()) {
                List<Long> mtds = new ArrayList<>();
                for (Long key : mtdsMap) {
                    mtds.add(key);
                }
                new FrmPlanoAnaliseVisualizar(null, true, mtds).setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }//GEN-LAST:event_btnPlanoAnaliseActionPerformed

    private void btnProcurarMetodologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarMetodologiaActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            Metodologia mtd = new Metodologia();
            FrmProcurarMetodologia frmMtd = new FrmProcurarMetodologia(null, true, mtd,
                    new HashSet<>(material.getMetodologia()));
            frmMtd.setVisible(true);
            if (mtd.getId() != null) {
                if (mtdsMap.isEmpty()) {
                    txtMetodos.setText(mtd.getCodMetodo() + " - " + mtd.getMetodo());
                    mtdsMap.add(mtd.getId());
                } else {
                    if (!mtdsMap.contains(mtd.getId())) {
                        txtMetodos.setText(txtMetodos.getText() + "\n" + mtd.getCodMetodo() + " - " + mtd.getMetodo());
                        mtdsMap.add(mtd.getId());
                    }
                }
            }
        } catch (Exception ex) {

        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnProcurarMetodologiaActionPerformed

    private void txtPesquisarAuditoriaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarAuditoriaKeyReleased
        TableSorter.TableSorter(tblAuditoria, txtPesquisarAuditoria);
    }//GEN-LAST:event_txtPesquisarAuditoriaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmLoteProdutoConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmLoteProdutoConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmLoteProdutoConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLoteProdutoConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FrmLoteProdutoConfig dialog = new FrmLoteProdutoConfig(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFCancelar;
    public static javax.swing.JButton btnPlanoAnalise;
    public static javax.swing.JButton btnProcurarMaterial;
    public static javax.swing.JButton btnProcurarMetodologia;
    public static javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlAuditTrail;
    private javax.swing.JPanel pnlAuditoriaGrupos;
    private javax.swing.JPanel pnlDadosLote1;
    private javax.swing.JPanel pnlDadosProduto1;
    private javax.swing.JTable tblAuditoria;
    private javax.swing.JTextField txtCodMaterial;
    public static javax.swing.JTextField txtComplemento;
    private com.toedter.calendar.JDateChooser txtDataEntrada;
    private com.toedter.calendar.JDateChooser txtDataImpressaoRoteiro;
    private com.toedter.calendar.JDateChooser txtDataPrevisao;
    private javax.swing.JSpinner txtHoraEntrada;
    private javax.swing.JSpinner txtHoraPrevisao;
    public static javax.swing.JTextField txtLote;
    private javax.swing.JTextField txtMaterial;
    private javax.swing.JTextArea txtMetodos;
    private javax.swing.JSpinner txtMinutoEntrada;
    private javax.swing.JSpinner txtMinutoPrevisao;
    private javax.swing.JFormattedTextField txtNumeroRoteiro;
    private javax.swing.JTextField txtObs;
    private javax.swing.JTextField txtPesquisarAuditoria;
    private javax.swing.JTextField txtTipo;
    // End of variables declaration//GEN-END:variables

    private void initForm() {
        initComponents();
        Frames.setUpFrame(this, "Lote Produto", true);
        readStatus();
        txtNumeroRoteiro.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(NumberFormat.getIntegerInstance())));
        txtLote.setDocument(new FieldFormatLimit(10, FieldFormatLimit.NUMEROS));
        SpinnerNumberModel modelHoraFim = new SpinnerNumberModel(0, 0, 23, 1);
        txtHoraPrevisao.setModel(modelHoraFim);
        JSpinner.NumberEditor editorHoraFim = new JSpinner.NumberEditor(txtHoraPrevisao);
        txtHoraPrevisao.setEditor(editorHoraFim);
        SpinnerNumberModel modelMinutoFim = new SpinnerNumberModel(0, 0, 59, 1);
        txtMinutoPrevisao.setModel(modelMinutoFim);
        JSpinner.NumberEditor editorMinutoFim = new JSpinner.NumberEditor(txtMinutoPrevisao);
        txtMinutoPrevisao.setEditor(editorMinutoFim);
        SpinnerNumberModel modelHoraStatus = new SpinnerNumberModel(0, 0, 23, 1);
        txtHoraEntrada.setModel(modelHoraStatus);
        JSpinner.NumberEditor editorHoraStatus = new JSpinner.NumberEditor(txtHoraEntrada);
        txtHoraEntrada.setEditor(editorHoraStatus);
        SpinnerNumberModel modelMinutoStatus = new SpinnerNumberModel(0, 0, 59, 1);
        txtMinutoEntrada.setModel(modelMinutoStatus);
        JSpinner.NumberEditor editorMinutoStatus = new JSpinner.NumberEditor(txtMinutoEntrada);
        txtMinutoEntrada.setEditor(editorMinutoStatus);
    }
    
    private void carregar() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            LoteProduto loteProduto = new LoteProdutoDAO().findById(LoteProduto.class, lote.getId());
            Material mat = new MaterialDAO().findMaterialMetodologiaById(loteProduto.getMaterial().getId());
            material = new MaterialDAO().findMaterialMetodologiaById(mat.getId());
            txtCodMaterial.setText(mat.getCodMaterial().toString());
            txtMaterial.setText(mat.getMaterial());
            txtTipo.setText(mat.getTipoMaterial().getSigla());
            try {
                if (loteProduto.getMetodologia() != null) {
                    mtdsMap.add(loteProduto.getMetodologia().getId());
                }
                if (loteProduto.getMetodologia2() != null) {
                    mtdsMap.add(loteProduto.getMetodologia2().getId());
                }
                if (loteProduto.getMetodologia3() != null) {
                    mtdsMap.add(loteProduto.getMetodologia3().getId());
                }
                if (!mtdsMap.isEmpty()) {
                    List<Metodologia> mtds = new MetodologiaDAO().findMetodologias(mtdsMap);
                    StringBuilder sb = new StringBuilder();
                    if (mtds != null) {
                        for (Metodologia mtd : mtds) {
                            if (!sb.toString().equals("")) {
                                sb.append("\n");
                            }
                            sb.append(mtd.getCodMetodo()).append(" - ").append(mtd.getMetodo());
                        }
                    }
                    txtMetodos.setText(sb.toString());
                } else {
                    JOptionPane.showMessageDialog(null, "Esse Lote não possui metodologia vinculada!",
                            "Metodologia não vinculada", JOptionPane.INFORMATION_MESSAGE);
                    Metodologia mtd = new Metodologia();
                    FrmProcurarMetodologia frmMtd = new FrmProcurarMetodologia(null, true, mtd,
                            new HashSet<>(material.getMetodologia()));
                    frmMtd.setVisible(true);
                    if (mtd != null) {
                        mtdsMap.add(mtd.getId());
                        txtMetodos.setText(mtd.getCodMetodo() + " - " + mtd.getMetodo());
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Erro");
            }
            txtLote.setText(loteProduto.getLote());
            carregarData(
                    loteProduto.getLoteInfo().getDataImpressaoRoteiro(),
                    loteProduto.getLoteInfo().getPrevLiberacao(),
                    loteProduto.getLoteInfo().getDataStatus()
            );
            String[] status = {loteProduto.getLoteInfo().getStatus()};
            status_lote = status[0];
            txtComplemento.setText(loteProduto.getLoteInfo().getComplemento());
            cmbStatus.setSelectedItem(status[0]);
            txtObs.setText(loteProduto.getLoteInfo().getObsCq());
            txtNumeroRoteiro.setText(loteProduto.getLoteInfo().getNumeroRoteiro().toString());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + ex);
        } finally {
            carregarAuditoria();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    public void readStatus() {
        cmbStatus.removeAllItems();
        cmbStatus.addItem("Entrada em Controle de Qualidade");
        cmbStatus.addItem("Análise");
        cmbStatus.addItem("Liberado");
    }

    private void criar() {
        try {
            LoteProdutoInfo loteInfo = new LoteProdutoInfo();
            LoteProduto loteProduto = new LoteProduto();
            PlanoAnaliseDAO paDAO = new PlanoAnaliseDAO();
            Material mat = new MaterialDAO().findMaterialByCodMaterial(Integer.valueOf(txtCodMaterial.getText()));
            loteProduto.setMaterial(mat);
            if (mtdsMap.size() == 1) {
                if (mtdsMap.get(0) != null) {
                    loteProduto.setMetodologia(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(0)));
                }
            }
            if (mtdsMap.size() == 2) {
                if (mtdsMap.get(0) != null) {
                    loteProduto.setMetodologia(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(0)));
                }
                if (mtdsMap.get(1) != null) {
                    loteProduto.setMetodologia2(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(1)));
                }
            }
            if (mtdsMap.size() == 3) {
                if (mtdsMap.get(0) != null) {
                    loteProduto.setMetodologia(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(0)));
                }
                if (mtdsMap.get(1) != null) {
                    loteProduto.setMetodologia2(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(1)));
                }
                if (mtdsMap.get(2) != null) {
                    loteProduto.setMetodologia3(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(2)));
                }
            }
            loteProduto.setLote(txtLote.getText().trim());
            loteProduto.setVersion(0);
            loteInfo.setDataEntrada(txtDataEntrada.getDate() == null ? null
                    : DataHora.getDateTime(DataHora.getStringDate(txtDataEntrada.getDate())
                            + " " + txtHoraEntrada.getValue().toString()
                            + ":" + txtMinutoEntrada.getValue().toString() + ":00"));
            loteInfo.setDataImpressaoRoteiro(txtDataImpressaoRoteiro.getDate());
            loteInfo.setPrevLiberacao(txtDataPrevisao.getDate() == null ? null
                    : DataHora.getDateTime(DataHora.getStringDate(txtDataPrevisao.getDate())
                            + " " + txtHoraPrevisao.getValue().toString()
                            + ":" + txtMinutoPrevisao.getValue().toString() + ":00"));
            if (!cmbStatus.getSelectedItem().toString().equals(status_lote)) {
                loteInfo.setDataStatus(new Date());
                loteInfo.setStatus(cmbStatus.getSelectedItem().toString());
            }
            loteInfo.setNumeroRoteiro((Integer) txtNumeroRoteiro.getValue());
            loteInfo.setObsCq(txtObs.getText());
            loteInfo.setVersion(0);
            loteProduto = new LoteProdutoDAO().salvar(loteProduto);
            if (!mtdsMap.isEmpty()) {
                for (Long key : mtdsMap) {
                    for (PlanoAnalise pa : paDAO.readPlanoAnalise(key)) {
                        LoteProdutoStatus loteStatus = new LoteProdutoStatus();
                        loteStatus.setLote(loteProduto);
                        loteStatus.setPlanoAnalise(pa);
                        loteStatus.setAnaliseStatus(new AnaliseStatusDAO().findById(AnaliseStatus.class, 1L));
                        loteStatus.setVersion(0);
                        new LoteProdutoStatusDAO().salvar(loteStatus);
                    }
                }
            }
            loteInfo.setLote(loteProduto);
            new LoteProdutoInfoDAO().salvarLoteProdutoInfo(loteInfo, loteProduto);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void atualizar() {
        try {
            PlanoAnaliseDAO paDAO = new PlanoAnaliseDAO();
            LoteProduto loteProduto = new LoteProdutoDAO().findById(LoteProduto.class, lote.getId());
            Material mat = new MaterialDAO().findMaterialByCodMaterial(Integer.valueOf(txtCodMaterial.getText()));
            loteProduto.setMaterial(mat);
            if (mtdsMap.size() == 1) {
                if (mtdsMap.get(0) != null) {
                    loteProduto.setMetodologia(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(0)));
                }
            }
            if (mtdsMap.size() == 2) {
                if (mtdsMap.get(0) != null) {
                    loteProduto.setMetodologia(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(0)));
                }
                if (mtdsMap.get(1) != null) {
                    loteProduto.setMetodologia2(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(1)));
                }
            }
            if (mtdsMap.size() == 3) {
                if (mtdsMap.get(0) != null) {
                    loteProduto.setMetodologia(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(0)));
                }
                if (mtdsMap.get(1) != null) {
                    loteProduto.setMetodologia2(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(1)));
                }
                if (mtdsMap.get(2) != null) {
                    loteProduto.setMetodologia3(new MetodologiaDAO().findById(Metodologia.class, mtdsMap.get(2)));
                }
            }
            loteProduto.setVersion(loteProduto.getVersion() + 1);
            new LoteProdutoDAO().salvar(loteProduto);
            LoteProdutoInfo loteInfo = new LoteProdutoInfoDAO().findById(LoteProdutoInfo.class, lote.getId());
            loteInfo.setDataImpressaoRoteiro(txtDataImpressaoRoteiro.getDate());
            loteInfo.setPrevLiberacao(txtDataPrevisao.getDate() == null ? null
                    : DataHora.getDateTime(DataHora.getStringDate(txtDataPrevisao.getDate())
                            + " " + txtHoraPrevisao.getValue().toString()
                            + ":" + txtMinutoPrevisao.getValue().toString() + ":00"));
            loteInfo.setDataEntrada(txtDataEntrada.getDate() == null ? null
                    : DataHora.getDateTime(DataHora.getStringDate(txtDataEntrada.getDate())
                            + " " + txtHoraEntrada.getValue().toString()
                            + ":" + txtMinutoEntrada.getValue().toString() + ":00"));
            Date dataStatus = new Date();
            loteInfo.setStatus(cmbStatus.getSelectedItem().toString());
            switch (loteInfo.getStatus()) {
                case "Análise":
                    loteInfo.setDataAnalise(dataStatus);
                    break;
                case "Entrada em Controle de Qualidade":
                    loteInfo.setDataEntrada(dataStatus);
                    break;
                case "Liberado":
                    loteInfo.setDataLiberado(dataStatus);
                    break;
            }
            loteInfo.setNumeroRoteiro((Integer) txtNumeroRoteiro.getValue());
            loteInfo.setObsCq(txtObs.getText());
            loteInfo.setNumeroRoteiro(Integer.getInteger(txtNumeroRoteiro.getText()));
            loteInfo.setVersion(loteInfo.getVersion() + 1);
            if (!mtdsMap.isEmpty()) {
                for (Long key : mtdsMap) {
                    for (PlanoAnalise pa : paDAO.readPlanoAnalise(key)) {
                        LoteProdutoStatus loteStatus = new LoteProdutoStatusDAO().findStatusByLoteAndPlanoAnalise(lote.getId(), pa.getId());
                        if (loteStatus == null) {
                            loteStatus = new LoteProdutoStatus();
                            loteStatus.setLote(lote);
                            loteStatus.setPlanoAnalise(pa);
                            loteStatus.setAnaliseStatus(new AnaliseStatusDAO().findById(AnaliseStatus.class, 1L));
                            loteStatus.setVersion(0);
                        } else {
                            if (loteStatus.getAnaliseStatus().getId() == null) {
                                loteStatus.setAnaliseStatus(new AnaliseStatusDAO().findById(AnaliseStatus.class, 1L));
                                loteStatus.setVersion(loteStatus.getVersion() + 1);
                            }
                        }
                        new LoteProdutoStatusDAO().salvar(loteStatus);
                    }
                }
            }
            new LoteProdutoInfoDAO().salvar(loteInfo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void limparRegistro() {
        txtCodMaterial.setText(null);
        txtMaterial.setText(null);
        txtTipo.setText(null);
        txtMetodos.setText(null);
    }

    private void carregarData(Date DataImpressaoRoteiro, Date PrevLiberacao, Date Entrada) {
        Calendar cal = Calendar.getInstance();
        if (DataImpressaoRoteiro != null) {
            cal.setTime(DataImpressaoRoteiro);
            txtDataImpressaoRoteiro.setDate(DataImpressaoRoteiro);
        }
        if (PrevLiberacao != null) {
            cal.setTime(PrevLiberacao);
            txtDataPrevisao.setDate(PrevLiberacao);
            txtHoraPrevisao.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoPrevisao.setValue((Integer) cal.get(Calendar.MINUTE));
        }
        if (Entrada != null) {
            cal.setTime(Entrada);
            txtDataEntrada.setDate(Entrada);
            txtHoraEntrada.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoEntrada.setValue((Integer) cal.get(Calendar.MINUTE));
        }
    }

    private void fechar() {
        Frames.fecharFrame(this);
    }

    private void carregarAuditoria() {
        DefaultTableModel model = (DefaultTableModel) tblAuditoria.getModel();
        LoteProdutoInfoDAO loteInfoDAO = new LoteProdutoInfoDAO();
        model.setNumRows(0);
        try {
            for (LoteProdutoInfo loteInfo : loteInfoDAO.readAuditoria(lote.getId())) {
                model.addRow(new Object[]{
                    loteInfo.getId(),
                    loteInfo.getVersion(),
                    loteInfo.getAudit().getMOD() == 0 ? "Criado"
                    : (loteInfo.getAudit().getMOD() == 1 ? "Modificado" : "Removido"),
                    loteInfo.getDataImpressaoRoteiro(),
                    loteInfo.getDataImpressaoRoteiro_MOD() == false ? "Não Alterado" : "Alterado",
                    loteInfo.getDataStatus(),
                    loteInfo.getDataStatus_MOD() == false ? "Não Alterado" : "Alterado",
                    loteInfo.getObsCq(),
                    loteInfo.getObsCq_MOD() == false ? "Não Alterado" : "Alterado",
                    loteInfo.getPrevLiberacao(),
                    loteInfo.getPrevLiberacao_MOD() == false ? "Não Alterado" : "Alterado",
                    loteInfo.getNumeroRoteiro(),
                    loteInfo.getNumeroRoteiro_MOD()== false ? "Não Alterado" : "Alterado",
                    loteInfo.getNumeroRoteiro(),
                    loteInfo.getNumeroRoteiro_MOD() == false ? "Não Alterado" : "Alterado",
                    loteInfo.getStatus(),
                    loteInfo.getStatus_MOD() == false ? "Não Alterado" : "Alterado",
                    loteInfo.getAudit().getComputador() + " / "
                    + loteInfo.getAudit().getUserComputador(),
                    loteInfo.getAudit().getUltimaModificacaoPor(),
                    DataHora.getStringDateTime(loteInfo.getAudit().getUltimaModificacao()),
                    loteInfo.getAudit().getMotivo()
                });
            }
        } catch (Exception e) {
        }
    }

}
