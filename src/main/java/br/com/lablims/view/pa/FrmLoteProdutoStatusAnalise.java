/*
 * Copyright (C) 2019 rafael.lopes
 *
 * Este programa é um software livre: você pode redistribuí-lo e / ou modificar
 * sob os termos da GNU General Public License, conforme publicado pela
 * a Free Software Foundation, seja a versão 3 da Licença, quanto
 * qualquer versão posterior.
 *
 * Este programa é distribuído na esperança de que seja útil,
 * mas SEM QUALQUER GARANTIA; sem a garantia implícita de
 * COMERCIALIZAÇÃO OU APTIDÃO PARA UM PROPÓSITO PARTICULAR. Veja o
 * GNU General Public License para obter mais detalhes.
 *
 * Você deve ter recebido uma cópia da GNU General Public License
 *  juntamente com este programa. Caso contrário, veja <http://www.gnu.org/licenses/>.
 */
package br.com.lablims.view.pa;

import br.com.lablims.view.mp.*;
import br.com.lablims.dao.AnaliseStatusDAO;
import br.com.lablims.dao.LoteMateriaPrimaDAO;
import br.com.lablims.dao.LoteMateriaPrimaStatusDAO;
import br.com.lablims.model.AnaliseStatus;
import br.com.lablims.model.LoteMateriaPrima;
import br.com.lablims.model.LoteMateriaPrimaStatus;
import br.com.lablims.util.AcessoSistema;
import br.com.lablims.util.ComboBox;
import br.com.lablims.util.Senha;
import br.com.lablims.util.DataHora;
import br.com.lablims.util.DateCellRenderer;
import br.com.lablims.util.Frames;
import br.com.lablims.util.GridlineCellRendererStatus;
import br.com.lablims.util.TableSorter;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.AbstractButton;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author rafael.lopes
 */
public class FrmLoteProdutoStatusAnalise extends javax.swing.JFrame {

    private final TreeMap<Long, String> categoryMapAnaliseStatus = new TreeMap<>();
    private String ACESSO = new AcessoSistema().getAcessoSistema(this);

    /**
     * Creates new form FrmMetodologiaAnalise
     */
    public FrmLoteProdutoStatusAnalise() {
        initComponents();
        Frames.setUpFrame(this, "Lote Matéria-Prima / Status da Análise", false);
        limparCampos();
        readLoteMateriaPrima();
        carregarStatus();
        btnSalvar.setEnabled(AcessoSistema.editarDados(ACESSO));
        btnAlterarStatus.setEnabled(AcessoSistema.editarDados(ACESSO));
        cmbStatus.setEnabled(AcessoSistema.editarDados(ACESSO));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMetodologia = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoteMateriaPrima = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtPesquisarLotes = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbLimitPorPagina = new javax.swing.JComboBox<>();
        jToolBar1 = new javax.swing.JToolBar();
        btnAtualizar = new javax.swing.JButton();
        pnlStatusLote = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtPesquisarAnalise = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblAnaliseStatus = new javax.swing.JTable();
        cmbStatus = new javax.swing.JComboBox();
        btnAlterarStatus = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblLote = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblProduto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Lotes"));

        tblLoteMateriaPrima.setAutoCreateRowSorter(true);
        tblLoteMateriaPrima.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lote_Id", "Lote", "Material", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLoteMateriaPrima.setSurrendersFocusOnKeystroke(true);
        tblLoteMateriaPrima.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoteMateriaPrimaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLoteMateriaPrima);
        if (tblLoteMateriaPrima.getColumnModel().getColumnCount() > 0) {
            tblLoteMateriaPrima.getColumnModel().getColumn(0).setMinWidth(0);
            tblLoteMateriaPrima.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblLoteMateriaPrima.getColumnModel().getColumn(0).setMaxWidth(0);
            tblLoteMateriaPrima.getColumnModel().getColumn(1).setMinWidth(90);
            tblLoteMateriaPrima.getColumnModel().getColumn(1).setPreferredWidth(90);
            tblLoteMateriaPrima.getColumnModel().getColumn(1).setMaxWidth(90);
            tblLoteMateriaPrima.getColumnModel().getColumn(3).setMinWidth(0);
            tblLoteMateriaPrima.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblLoteMateriaPrima.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jLabel4.setText("Pesquisar:");

        txtPesquisarLotes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarLotesKeyReleased(evt);
            }
        });

        jLabel11.setText("Visualizar:");

        cmbLimitPorPagina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1000", "10000", "100000", "1000000", "10000000" }));
        cmbLimitPorPagina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLimitPorPaginaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarLotes, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbLimitPorPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbLimitPorPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPesquisarLotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_atualizar.png"))); // NOI18N
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setFocusable(false);
        btnAtualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtualizar.setPreferredSize(new java.awt.Dimension(60, 60));
        btnAtualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAtualizar);

        pnlStatusLote.setBorder(javax.swing.BorderFactory.createTitledBorder("Status do Lote"));

        jLabel5.setText("Pesquisar:");

        txtPesquisarAnalise.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarAnaliseKeyReleased(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        tblAnaliseStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Analise_Id", "Descrição da Análise ", "Setor", "Status", "Data/Hora", "1° Check", "Data/Hora", "Obs", "Data/Hora Previsão"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAnaliseStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblAnaliseStatus.setRowHeight(24);
        tblAnaliseStatus.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tblAnaliseStatus);
        if (tblAnaliseStatus.getColumnModel().getColumnCount() > 0) {
            tblAnaliseStatus.getColumnModel().getColumn(0).setMinWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(0).setMaxWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(1).setMinWidth(100);
            tblAnaliseStatus.getColumnModel().getColumn(1).setPreferredWidth(350);
            tblAnaliseStatus.getColumnModel().getColumn(2).setMinWidth(120);
            tblAnaliseStatus.getColumnModel().getColumn(2).setPreferredWidth(120);
            tblAnaliseStatus.getColumnModel().getColumn(3).setMinWidth(130);
            tblAnaliseStatus.getColumnModel().getColumn(3).setPreferredWidth(130);
            tblAnaliseStatus.getColumnModel().getColumn(3).setMaxWidth(130);
            tblAnaliseStatus.getColumnModel().getColumn(4).setMinWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(4).setMaxWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(5).setMinWidth(60);
            tblAnaliseStatus.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblAnaliseStatus.getColumnModel().getColumn(5).setMaxWidth(60);
            tblAnaliseStatus.getColumnModel().getColumn(6).setMinWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(6).setMaxWidth(0);
            tblAnaliseStatus.getColumnModel().getColumn(7).setMinWidth(300);
            tblAnaliseStatus.getColumnModel().getColumn(7).setPreferredWidth(300);
            tblAnaliseStatus.getColumnModel().getColumn(8).setMinWidth(200);
            tblAnaliseStatus.getColumnModel().getColumn(8).setPreferredWidth(200);
            tblAnaliseStatus.getColumnModel().getColumn(8).setMaxWidth(200);
        }

        btnAlterarStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_update_16.png"))); // NOI18N
        btnAlterarStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarStatusActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Lote:");

        jLabel3.setText("Produto:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLote)
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProduto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblLote)
                    .addComponent(jLabel3)
                    .addComponent(lblProduto))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlStatusLoteLayout = new javax.swing.GroupLayout(pnlStatusLote);
        pnlStatusLote.setLayout(pnlStatusLoteLayout);
        pnlStatusLoteLayout.setHorizontalGroup(
            pnlStatusLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusLoteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatusLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLoteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLoteLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarAnalise)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAlterarStatus))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlStatusLoteLayout.setVerticalGroup(
            pnlStatusLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLoteLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(pnlStatusLoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisarAnalise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAlterarStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalvar)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMetodologiaLayout = new javax.swing.GroupLayout(pnlMetodologia);
        pnlMetodologia.setLayout(pnlMetodologiaLayout);
        pnlMetodologiaLayout.setHorizontalGroup(
            pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMetodologiaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlStatusLote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMetodologiaLayout.setVerticalGroup(
            pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMetodologiaLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMetodologiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlStatusLote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMetodologia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMetodologia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblLoteMateriaPrimaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoteMateriaPrimaMouseClicked
        if (evt.getClickCount() == 2) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            readStatus();
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_tblLoteMateriaPrimaMouseClicked

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        readLoteMateriaPrima();
        limparCampos();
        DefaultTableModel model = (DefaultTableModel) tblAnaliseStatus.getModel();
        model.setNumRows(0);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void cmbLimitPorPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLimitPorPaginaActionPerformed
        readLoteMateriaPrima();
    }//GEN-LAST:event_cmbLimitPorPaginaActionPerformed

    private void txtPesquisarLotesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarLotesKeyReleased
        TableSorter.TableSorter(tblLoteMateriaPrima, txtPesquisarLotes);
    }//GEN-LAST:event_txtPesquisarLotesKeyReleased

    private void txtPesquisarAnaliseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarAnaliseKeyReleased
        TableSorter.TableSorter(tblAnaliseStatus, txtPesquisarAnalise);
    }//GEN-LAST:event_txtPesquisarAnaliseKeyReleased

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        Senha senha = new Senha();
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (senha.Salvar()) {
            atualizar();
            DefaultTableModel model = (DefaultTableModel) tblAnaliseStatus.getModel();
            model.setNumRows(0);
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnAlterarStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarStatusActionPerformed
        if (!cmbStatus.getSelectedItem().toString().equals("")) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            int[] rows = tblAnaliseStatus.getSelectedRows();
            try {
                if (tblAnaliseStatus.getSelectedRow() != -1) {
                    for (int num : rows) {
                        tblAnaliseStatus.setValueAt(cmbStatus.getSelectedItem().toString(), num, 3);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar Lotes: ");
            }
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnAlterarStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLoteProdutoStatusAnalise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrmLoteProdutoStatusAnalise().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterarStatus;
    private javax.swing.JButton btnAtualizar;
    public static javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cmbLimitPorPagina;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblLote;
    private javax.swing.JLabel lblProduto;
    private javax.swing.JPanel pnlMetodologia;
    private javax.swing.JPanel pnlStatusLote;
    private javax.swing.JTable tblAnaliseStatus;
    private javax.swing.JTable tblLoteMateriaPrima;
    private javax.swing.JTextField txtPesquisarAnalise;
    private javax.swing.JTextField txtPesquisarLotes;
    // End of variables declaration//GEN-END:variables

    private void readLoteMateriaPrima() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        DefaultTableModel model = (DefaultTableModel) tblLoteMateriaPrima.getModel();
        LoteMateriaPrimaDAO loteDAO = new LoteMateriaPrimaDAO();
        model.setNumRows(0);
        Map<String, String> where = new HashMap<>();
        int[] rows = {3};
        TableSorter.RowSorter(tblLoteMateriaPrima, rows, null);
        DateCellRenderer r = new DateCellRenderer();
        tblLoteMateriaPrima.setDefaultRenderer(Object.class, r);
        where.put("status", "Todos");
        Integer max = Integer.parseInt(cmbLimitPorPagina.getSelectedItem().toString());
        try {
            for (LoteMateriaPrima lote : loteDAO.findListLoteMateriaPrima(max, where)) {
                model.addRow(new Object[]{
                    lote.getId(),
                    lote.getLote(),
                    lote.getMaterial().getCodMaterial()
                    + " - " + lote.getMaterial().getMaterial(),
                    lote.getLoteInfo().getDataNecessidade() == null ? "X"
                    : lote.getLoteInfo().getDataNecessidade()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    public void readStatus() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblAnaliseStatus.getModel();
            lblLote.setText(tblLoteMateriaPrima.getValueAt(tblLoteMateriaPrima.getSelectedRow(), 1).toString());
            lblProduto.setText(tblLoteMateriaPrima.getValueAt(tblLoteMateriaPrima.getSelectedRow(), 2).toString());
            model.setNumRows(0);
            GridlineCellRendererStatus r = new GridlineCellRendererStatus();
            tblAnaliseStatus.setDefaultRenderer(Object.class, r);
            JComboBox comboAnaliseStatus = new JComboBox();
            comboAnaliseStatus.addItem("");
            categoryMapAnaliseStatus.clear();
            AnaliseStatusDAO analiseStatusDAO = new AnaliseStatusDAO();
            for (AnaliseStatus analiseStatus : analiseStatusDAO.findEntities(AnaliseStatus.class)) {
                Long id = analiseStatus.getId();
                String name = analiseStatus.getAnaliseStatus();
                comboAnaliseStatus.addItem(name);
                categoryMapAnaliseStatus.put(id, name);
            }
            TableColumn colAnaliseSetor = tblAnaliseStatus.getColumnModel().getColumn(3);
            colAnaliseSetor.setCellEditor(new DefaultCellEditor(comboAnaliseStatus));
            TableColumn colHoraPrevisao = tblAnaliseStatus.getColumnModel().getColumn(8);
            MaskFormatter maskFormatter = new MaskFormatter("##/##/#### ##:##");
            maskFormatter.setPlaceholderCharacter('_');
            colHoraPrevisao.setCellEditor(new DefaultCellEditor(new JFormattedTextField(maskFormatter)));
            JCheckBox checkConfere = new JCheckBox();
            checkConfere.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AbstractButton abstractButton = (AbstractButton) e.getSource();
                    boolean selected = abstractButton.getModel().isSelected();
                    tblAnaliseStatus.setValueAt(selected ? "FINALIZADO" : "EM ANALISE", tblAnaliseStatus.getSelectedRow(), 3);
                }
            });
            TableColumn colCheck = tblAnaliseStatus.getColumnModel().getColumn(5);
            colCheck.setCellEditor(new DefaultCellEditor(checkConfere));
            LoteMateriaPrimaStatusDAO loteStatusDAO = new LoteMateriaPrimaStatusDAO();
            for (LoteMateriaPrimaStatus loteStatus : loteStatusDAO.findLotesByStatus(
                    (Long) tblLoteMateriaPrima.getValueAt(tblLoteMateriaPrima.getSelectedRow(), 0))) {
                model.addRow(new Object[]{
                    loteStatus.getId(),
                    loteStatus.getPlanoAnalise().getDescricao(),
                    loteStatus.getPlanoAnalise().getSetor().getSiglaSetor(),
                    loteStatus.getAnaliseStatus().getAnaliseStatus(),
                    DataHora.getStringDateTime(loteStatus.getStatusDataHora()),
                    loteStatus.getConferido(),
                    DataHora.getStringDateTime(loteStatus.getConferidoDataHora()),
                    loteStatus.getObs(),
                    DataHora.getStringDateTimeShort(loteStatus.getPrevisaoDataHora())
                });
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + ex);
        }
    }

    private void atualizar() {
        try {
            int rows = tblAnaliseStatus.getRowCount();
            for (int row = 0; row < rows; row++) {
                String campo = (String) tblAnaliseStatus.getModel().getValueAt(row, 3);
                Boolean check = (Boolean) tblAnaliseStatus.getModel().getValueAt(row, 5);
                String obs = (String) tblAnaliseStatus.getModel().getValueAt(row, 7);
                String dataPrevisao = (String) tblAnaliseStatus.getModel().getValueAt(row, 8);
                if (ComboBox.getKeyForValue(campo, categoryMapAnaliseStatus) > 0) {
                    LoteMateriaPrimaStatusDAO loteStatusDAO = new LoteMateriaPrimaStatusDAO();
                    AnaliseStatus analiseStatus = new AnaliseStatusDAO()
                            .findById(AnaliseStatus.class, ComboBox.getKeyForValue((String) tblAnaliseStatus.getModel()
                                            .getValueAt(row, 3), categoryMapAnaliseStatus));
                    LoteMateriaPrimaStatus loteStatus = loteStatusDAO.findById(LoteMateriaPrimaStatus.class,
                            (Long) tblAnaliseStatus.getModel().getValueAt(row, 0));
                    if (!campo.equals(loteStatus.getAnaliseStatus().getAnaliseStatus())) {
                        loteStatus.setAnaliseStatus(analiseStatus);
                        loteStatus.setStatusDataHora(new Date());
                    }
                    try {
                        loteStatus.setConferido(check);
                        if (check) {
                            loteStatus.setConferidoDataHora(new Date());
                        } else {
                            loteStatus.setConferidoDataHora(null);
                        }
                    } catch (Exception e) {
                        loteStatus.setConferido(false);
                        loteStatus.setConferidoDataHora(null);
                    }
                    try {
                        loteStatus.setPrevisaoDataHora(new Date(dataPrevisao));
                    } catch (Exception e) {
                        loteStatus.setPrevisaoDataHora(null);
                    }
                    loteStatus.setObs(obs);
                    loteStatus.setVersion(loteStatus.getVersion() + 1);
                    loteStatusDAO.salvar(loteStatus);
                } else {
                    JOptionPane.showMessageDialog(null, "Analise_id: "
                            + tblAnaliseStatus.getModel().getValueAt(row, 0)
                            + "Status inválido");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void carregarStatus() {
        try {
            AnaliseStatusDAO analiseStatusDAO = new AnaliseStatusDAO();
            cmbStatus.addItem("");
            for (AnaliseStatus analiseStatus : analiseStatusDAO.findEntities(AnaliseStatus.class)) {
                cmbStatus.addItem(analiseStatus.getAnaliseStatus());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        }
    }

    private void limparCampos() {
        lblLote.setText(null);
        lblProduto.setText(null);
        txtPesquisarAnalise.setText(null);
        txtPesquisarLotes.setText(null);
    }
}
